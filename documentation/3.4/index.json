[
  {
    "description": "Mapnik is the core of cartographic design and processing. `node-mapnik` provides a\nset of bindings to `mapnik` for node.js.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik"
      },
      {
        "title": "class",
        "description": null,
        "type": null,
        "name": null
      },
      {
        "title": "property",
        "description": "current version of mapnik",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "version"
      },
      {
        "title": "property",
        "description": "path to native mapnik binding",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "module_path"
      },
      {
        "title": "property",
        "description": "indicates which of the following are supported:\ngrid, svg, cairo, cairo_pdf, cairo_svg, png, jpeg, tiff, webp, proj4, threadsafe",
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "supports"
      },
      {
        "title": "property",
        "description": "diagnostic object with versions of\nnode, v8, boost, boost_number, mapnik, mapnik_number, mapnik_git_describe, cairo",
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "versions"
      },
      {
        "title": "example",
        "description": "var mapnik = require('node-mapnik');"
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 71,
          "column": 1
        },
        "end": {
          "line": 85,
          "column": 3
        }
      },
      "file": "src/node_mapnik.cpp",
      "path": "src/node_mapnik.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/node_mapnik.cpp#L71-L85"
    },
    "name": "mapnik",
    "properties": [
      {
        "title": "property",
        "description": "current version of mapnik",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "version"
      },
      {
        "title": "property",
        "description": "path to native mapnik binding",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "module_path"
      },
      {
        "title": "property",
        "description": "indicates which of the following are supported:\ngrid, svg, cairo, cairo_pdf, cairo_svg, png, jpeg, tiff, webp, proj4, threadsafe",
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "supports"
      },
      {
        "title": "property",
        "description": "diagnostic object with versions of\nnode, v8, boost, boost_number, mapnik, mapnik_number, mapnik_git_describe, cairo",
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "versions"
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> mapnik = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'node-mapnik'</span>);"
    ],
    "members": {
      "instance": [],
      "static": [
        {
          "description": "Image type constants representing color and grayscale encodings.\nComposite operation constants",
          "tags": [
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "clear"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "src"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "dst"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "src_over"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "dst_over"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "src_in"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "dst_in"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "src_out"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "dst_out"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "src_atop"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "dst_atop"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "xor"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "plus"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "minus"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "multiply"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "screen"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "overlay"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "darken"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "lighten"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "color_dodge"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "color_burn"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "hard_light"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "soft_light"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "difference"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "exclusion"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "contrast"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "invert"
            },
            {
              "title": "property",
              "description": "-rgb",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "invert"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "grain_merge"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "grain_extract"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "hue"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "saturation"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "color"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "linear_dodge"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "linear_burn"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "divide"
            },
            {
              "title": "name",
              "description": null,
              "name": "compositeOp"
            },
            {
              "title": "memberof",
              "description": "mapnik"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "class",
              "description": null,
              "type": null,
              "name": null
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 216,
                "column": 1
              },
              "end": {
                "line": 260,
                "column": 3
              }
            },
            "file": "src/node_mapnik.cpp",
            "path": "src/node_mapnik.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/node_mapnik.cpp#L216-L260"
          },
          "properties": [
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "clear"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "src"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "dst"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "src_over"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "dst_over"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "src_in"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "dst_in"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "src_out"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "dst_out"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "src_atop"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "dst_atop"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "xor"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "plus"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "minus"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "multiply"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "screen"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "overlay"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "darken"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "lighten"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "color_dodge"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "color_burn"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "hard_light"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "soft_light"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "difference"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "exclusion"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "contrast"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "invert"
            },
            {
              "title": "property",
              "description": "-rgb",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "invert"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "grain_merge"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "grain_extract"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "hue"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "saturation"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "color"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "linear_dodge"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "linear_burn"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "divide"
            }
          ],
          "name": "compositeOp",
          "memberof": "mapnik",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik",
            "compositeOp"
          ]
        },
        {
          "description": "Image scaling type constants representing color and grayscale encodings.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "imageScaling"
            },
            {
              "title": "memberof",
              "description": "mapnik"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "class",
              "description": null,
              "type": null,
              "name": null
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "near"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "bilinear"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "bicubic"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "spline16"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "spline36"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "hanning"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "hamming"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "hermite"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "kaiser"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "quadric"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "catrom"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gaussian"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "bessel"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "mitchell"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "sinc"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "lanczos"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "blackman"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 334,
                "column": 1
              },
              "end": {
                "line": 358,
                "column": 3
              }
            },
            "file": "src/node_mapnik.cpp",
            "path": "src/node_mapnik.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/node_mapnik.cpp#L334-L358"
          },
          "name": "imageScaling",
          "memberof": "mapnik",
          "scope": "static",
          "properties": [
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "near"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "bilinear"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "bicubic"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "spline16"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "spline36"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "hanning"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "hamming"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "hermite"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "kaiser"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "quadric"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "catrom"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gaussian"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "bessel"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "mitchell"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "sinc"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "lanczos"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "blackman"
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik",
            "imageScaling"
          ]
        },
        {
          "description": "Image type constants representing color and grayscale encodings.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "imageType"
            },
            {
              "title": "memberof",
              "description": "mapnik"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "class",
              "description": null,
              "type": null,
              "name": null
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "rgba8"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray8"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray8s"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray16"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray16s"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray32"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray32s"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray32f"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray64"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray64s"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray64f"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 300,
                "column": 1
              },
              "end": {
                "line": 318,
                "column": 3
              }
            },
            "file": "src/node_mapnik.cpp",
            "path": "src/node_mapnik.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/node_mapnik.cpp#L300-L318"
          },
          "name": "imageType",
          "memberof": "mapnik",
          "scope": "static",
          "properties": [
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "rgba8"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray8"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray8s"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray16"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray16s"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray32"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray32s"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray32f"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray64"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray64s"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "gray64f"
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik",
            "imageType"
          ]
        },
        {
          "description": "Constants representing fill types understood by [Clipper during vector tile encoding](http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/PolyFillType.htm).",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "polygonFillType"
            },
            {
              "title": "memberof",
              "description": "mapnik"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "class",
              "description": null,
              "type": null,
              "name": null
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "evenOdd"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "nonZero"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "positive"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "negative"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 379,
                "column": 1
              },
              "end": {
                "line": 390,
                "column": 3
              }
            },
            "file": "src/node_mapnik.cpp",
            "path": "src/node_mapnik.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/node_mapnik.cpp#L379-L390"
          },
          "name": "polygonFillType",
          "memberof": "mapnik",
          "scope": "static",
          "properties": [
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "evenOdd"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "nonZero"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "positive"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "negative"
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik",
            "polygonFillType"
          ]
        },
        {
          "description": "Constants representing `std::async` threading mode (aka [launch policy](http://en.cppreference.com/w/cpp/thread/launch)).",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "threadingMode"
            },
            {
              "title": "memberof",
              "description": "mapnik"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "class",
              "description": null,
              "type": null,
              "name": null
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "async"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "deferred"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 398,
                "column": 1
              },
              "end": {
                "line": 407,
                "column": 3
              }
            },
            "file": "src/node_mapnik.cpp",
            "path": "src/node_mapnik.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/node_mapnik.cpp#L398-L407"
          },
          "name": "threadingMode",
          "memberof": "mapnik",
          "scope": "static",
          "properties": [
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "async"
            },
            {
              "title": "property",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "deferred"
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik",
            "threadingMode"
          ]
        }
      ]
    },
    "events": [],
    "path": [
      "mapnik"
    ]
  },
  {
    "description": "",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.Color"
      },
      {
        "title": "class",
        "description": null,
        "type": null,
        "name": null
      },
      {
        "title": "param",
        "description": "either an array of [r, g, b, a],\na color keyword, or a CSS color in rgba() form.",
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "number"
            }
          ]
        },
        "name": "value"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "green"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "blue"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "blue"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "name": "premultiplied"
      },
      {
        "title": "throws",
        "description": "if a rgb component is outside of the 0-255 range",
        "type": {
          "type": "NameExpression",
          "name": "TypeError"
        }
      },
      {
        "title": "example",
        "description": "var c = new mapnik.Color('green');\nvar c = new mapnik.Color(0, 128, 0, 255);\n// premultiplied\nvar c = new mapnik.Color(0, 128, 0, 255, true);"
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 28,
          "column": 3
        }
      },
      "file": "src/mapnik_color.cpp",
      "path": "src/mapnik_color.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_color.cpp#L13-L28"
    },
    "name": "mapnik.Color",
    "params": [
      {
        "title": "param",
        "description": "either an array of [r, g, b, a],\na color keyword, or a CSS color in rgba() form.",
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "number"
            }
          ]
        },
        "name": "value"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "green"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "blue"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "blue"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "name": "premultiplied"
      }
    ],
    "throws": [
      {
        "title": "throws",
        "description": "if a rgb component is outside of the 0-255 range",
        "type": {
          "type": "NameExpression",
          "name": "TypeError"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'green'</span>);\n<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>);\n<span class=\"hljs-comment\">// premultiplied</span>\n<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-literal\">true</span>);"
    ],
    "members": {
      "instance": [
        {
          "description": "Get whether this color is premultiplied",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "get_premultiplied"
            },
            {
              "title": "memberof",
              "description": "mapnik.Color"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "premultiplied",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 228,
                "column": 1
              },
              "end": {
                "line": 235,
                "column": 3
              }
            },
            "file": "src/mapnik_color.cpp",
            "path": "src/mapnik_color.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_color.cpp#L228-L235"
          },
          "name": "get_premultiplied",
          "memberof": "mapnik.Color",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "premultiplied",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Color",
            "get_premultiplied"
          ]
        },
        {
          "description": "Get this color represented as a hexademical string",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "hex"
            },
            {
              "title": "memberof",
              "description": "mapnik.Color"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "hex representation",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "example",
              "description": "var c = new mapnik.Color('green');\nc.hex();\n// '#008000'"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 284,
                "column": 1
              },
              "end": {
                "line": 295,
                "column": 3
              }
            },
            "file": "src/mapnik_color.cpp",
            "path": "src/mapnik_color.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_color.cpp#L284-L295"
          },
          "name": "hex",
          "memberof": "mapnik.Color",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "hex representation",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'green'</span>);\nc.hex();\n<span class=\"hljs-comment\">// '#008000'</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Color",
            "hex"
          ]
        },
        {
          "description": "Set whether this color should be premultiplied",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "set_premultiplied"
            },
            {
              "title": "memberof",
              "description": "mapnik.Color"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              },
              "name": "premultiplied"
            },
            {
              "title": "example",
              "description": "var c = new mapnik.Color('green');\nc.set_premultiplied(true);"
            },
            {
              "title": "throws",
              "description": "given a non-boolean argument",
              "type": {
                "type": "NameExpression",
                "name": "TypeError"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 243,
                "column": 1
              },
              "end": {
                "line": 254,
                "column": 3
              }
            },
            "file": "src/mapnik_color.cpp",
            "path": "src/mapnik_color.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_color.cpp#L243-L254"
          },
          "name": "set_premultiplied",
          "memberof": "mapnik.Color",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              },
              "name": "premultiplied"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'green'</span>);\nc.set_premultiplied(<span class=\"hljs-literal\">true</span>);"
          ],
          "throws": [
            {
              "title": "throws",
              "description": "given a non-boolean argument",
              "type": {
                "type": "NameExpression",
                "name": "TypeError"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Color",
            "set_premultiplied"
          ]
        },
        {
          "description": "Get this color's representation as a string",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "toString"
            },
            {
              "title": "memberof",
              "description": "mapnik.Color"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "color as a string",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "example",
              "description": "var green = new mapnik.Color('green');\ngreen.toString()\n// 'rgb(0,128,0)'"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 266,
                "column": 1
              },
              "end": {
                "line": 277,
                "column": 3
              }
            },
            "file": "src/mapnik_color.cpp",
            "path": "src/mapnik_color.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_color.cpp#L266-L277"
          },
          "name": "toString",
          "memberof": "mapnik.Color",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "color as a string",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> green = <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'green'</span>);\ngreen.toString()\n<span class=\"hljs-comment\">// 'rgb(0,128,0)'</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Color",
            "toString"
          ]
        }
      ],
      "static": []
    },
    "events": [],
    "path": [
      "mapnik.Color"
    ]
  },
  {
    "description": "A Datasource object. This is the connector from Mapnik to any kind\nof file, network, or database source of geographical data.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.Datasource"
      },
      {
        "title": "class",
        "description": null,
        "type": null,
        "name": null
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 22,
          "column": 1
        },
        "end": {
          "line": 28,
          "column": 3
        }
      },
      "file": "src/mapnik_datasource.cpp",
      "path": "src/mapnik_datasource.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_datasource.cpp#L22-L28"
    },
    "name": "mapnik.Datasource",
    "members": {
      "instance": [
        {
          "description": "Describe the datasource's contents and type.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "describe"
            },
            {
              "title": "memberof",
              "description": "mapnik.Datasource"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "description: an object with type, fields, encoding,\ngeometry_type, and proj4 code",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 202,
                "column": 1
              },
              "end": {
                "line": 210,
                "column": 3
              }
            },
            "file": "src/mapnik_datasource.cpp",
            "path": "src/mapnik_datasource.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_datasource.cpp#L202-L210"
          },
          "name": "describe",
          "memberof": "mapnik.Datasource",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "description: an object with type, fields, encoding,\ngeometry_type, and proj4 code",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Datasource",
            "describe"
          ]
        },
        {
          "description": "Get the Datasource's extent",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "extent"
            },
            {
              "title": "memberof",
              "description": "mapnik.Datasource"
            },
            {
              "title": "instance",
              "description": null
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 166,
                "column": 1
              },
              "end": {
                "line": 173,
                "column": 3
              }
            },
            "file": "src/mapnik_datasource.cpp",
            "path": "src/mapnik_datasource.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_datasource.cpp#L166-L173"
          },
          "name": "extent",
          "memberof": "mapnik.Datasource",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Datasource",
            "extent"
          ]
        }
      ],
      "static": []
    },
    "events": [],
    "path": [
      "mapnik.Datasource"
    ]
  },
  {
    "description": "A single geographic feature, with geometry and properties. This is\ntypically derived from data by a datasource, but can be manually\ncreated.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.Feature"
      },
      {
        "title": "class",
        "description": null,
        "type": null,
        "name": null
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 16,
          "column": 1
        },
        "end": {
          "line": 23,
          "column": 3
        }
      },
      "file": "src/mapnik_feature.cpp",
      "path": "src/mapnik_feature.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_feature.cpp#L16-L23"
    },
    "name": "mapnik.Feature",
    "members": {
      "instance": [
        {
          "description": "Get the feature's attributes as an object.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "attributes"
            },
            {
              "title": "memberof",
              "description": "mapnik.Feature"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "attributes",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 171,
                "column": 1
              },
              "end": {
                "line": 178,
                "column": 3
              }
            },
            "file": "src/mapnik_feature.cpp",
            "path": "src/mapnik_feature.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_feature.cpp#L171-L178"
          },
          "name": "attributes",
          "memberof": "mapnik.Feature",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "attributes",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Feature",
            "attributes"
          ]
        },
        {
          "description": "Get the feature's extent",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "extent"
            },
            {
              "title": "memberof",
              "description": "mapnik.Feature"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "extent [minx, miny, maxx, maxy] order feature extent.",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 150,
                "column": 1
              },
              "end": {
                "line": 157,
                "column": 3
              }
            },
            "file": "src/mapnik_feature.cpp",
            "path": "src/mapnik_feature.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_feature.cpp#L150-L157"
          },
          "name": "extent",
          "memberof": "mapnik.Feature",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "extent [minx, miny, maxx, maxy] order feature extent.",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Feature",
            "extent"
          ]
        },
        {
          "description": "Get the feature's attributes as a Mapnik geometry.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "geometry"
            },
            {
              "title": "memberof",
              "description": "mapnik.Feature"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "geometry",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Geometry"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 196,
                "column": 1
              },
              "end": {
                "line": 203,
                "column": 3
              }
            },
            "file": "src/mapnik_feature.cpp",
            "path": "src/mapnik_feature.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_feature.cpp#L196-L203"
          },
          "name": "geometry",
          "memberof": "mapnik.Feature",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "geometry",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Geometry"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Feature",
            "geometry"
          ]
        },
        {
          "description": "",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Feature"
            },
            {
              "title": "name",
              "description": null,
              "name": "id"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "id the feature's internal id",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 138,
                "column": 1
              },
              "end": {
                "line": 143,
                "column": 3
              }
            },
            "file": "src/mapnik_feature.cpp",
            "path": "src/mapnik_feature.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_feature.cpp#L138-L143"
          },
          "memberof": "mapnik.Feature",
          "name": "id",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "id the feature's internal id",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Feature",
            "id"
          ]
        },
        {
          "description": "Generate and return a GeoJSON representation of this feature",
          "tags": [
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "toJSON"
            },
            {
              "title": "memberof",
              "description": "mapnik.Feature"
            },
            {
              "title": "returns",
              "description": "geojson Feature object in stringified GeoJSON",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 210,
                "column": 1
              },
              "end": {
                "line": 217,
                "column": 3
              }
            },
            "file": "src/mapnik_feature.cpp",
            "path": "src/mapnik_feature.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_feature.cpp#L210-L217"
          },
          "scope": "instance",
          "name": "toJSON",
          "memberof": "mapnik.Feature",
          "returns": [
            {
              "title": "returns",
              "description": "geojson Feature object in stringified GeoJSON",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Feature",
            "toJSON"
          ]
        }
      ],
      "static": [
        {
          "description": "",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Feature"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "fromJSON"
            },
            {
              "title": "param",
              "description": "string\n\nCreate a feature from a GeoJSON representation.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "geojson"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 92,
                "column": 1
              },
              "end": {
                "line": 99,
                "column": 3
              }
            },
            "file": "src/mapnik_feature.cpp",
            "path": "src/mapnik_feature.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_feature.cpp#L92-L99"
          },
          "memberof": "mapnik.Feature",
          "scope": "static",
          "name": "fromJSON",
          "params": [
            {
              "title": "param",
              "description": "string\n\nCreate a feature from a GeoJSON representation.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "geojson"
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Feature",
            "fromJSON"
          ]
        }
      ]
    },
    "events": [],
    "path": [
      "mapnik.Feature"
    ]
  },
  {
    "description": "An iterator of {@link mapnik.Feature} objects.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.Featureset"
      },
      {
        "title": "class",
        "description": null,
        "type": null,
        "name": null
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 6,
          "column": 1
        },
        "end": {
          "line": 11,
          "column": 3
        }
      },
      "file": "src/mapnik_featureset.cpp",
      "path": "src/mapnik_featureset.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_featureset.cpp#L6-L11"
    },
    "name": "mapnik.Featureset",
    "members": {
      "instance": [
        {
          "description": "Return the next Feature in this featureset if it exists, or `null` if it\ndoes not.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "next"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Featureset"
            },
            {
              "title": "returns",
              "description": "next feature",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.Feature"
                  },
                  {
                    "type": "NullLiteral"
                  }
                ]
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 56,
                "column": 1
              },
              "end": {
                "line": 64,
                "column": 3
              }
            },
            "file": "src/mapnik_featureset.cpp",
            "path": "src/mapnik_featureset.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_featureset.cpp#L56-L64"
          },
          "name": "next",
          "scope": "instance",
          "memberof": "mapnik.Featureset",
          "returns": [
            {
              "title": "returns",
              "description": "next feature",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.Feature"
                  },
                  {
                    "type": "NullLiteral"
                  }
                ]
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Featureset",
            "next"
          ]
        }
      ],
      "static": []
    },
    "events": [],
    "path": [
      "mapnik.Featureset"
    ]
  },
  {
    "description": "Geometry: a representation of geographical features in terms of\nshape alone. This class provides many useful functions for conversion\nto and from formats.\n\nYou'll never create a mapnik.Geometry instance manually: it is always\npart of a {@link mapnik.Feature} instance, which is often a part of\na {@link mapnik.Featureset} instance.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.Geometry"
      },
      {
        "title": "class",
        "description": null,
        "type": null,
        "name": null
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 13,
          "column": 1
        },
        "end": {
          "line": 24,
          "column": 3
        }
      },
      "file": "src/mapnik_geometry.cpp",
      "path": "src/mapnik_geometry.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_geometry.cpp#L13-L24"
    },
    "name": "mapnik.Geometry",
    "members": {
      "instance": [
        {
          "description": "Get the geometry's extent",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "extent"
            },
            {
              "title": "memberof",
              "description": "mapnik.Geometry"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "extent [minx, miny, maxx, maxy] order geometry extent.",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 318,
                "column": 1
              },
              "end": {
                "line": 325,
                "column": 3
              }
            },
            "file": "src/mapnik_geometry.cpp",
            "path": "src/mapnik_geometry.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_geometry.cpp#L318-L325"
          },
          "name": "extent",
          "memberof": "mapnik.Geometry",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "extent [minx, miny, maxx, maxy] order geometry extent.",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Geometry",
            "extent"
          ]
        },
        {
          "description": "Convert this geometry into a [GeoJSON](http://geojson.org/) representation,\nasynchronously.",
          "tags": [
            {
              "title": "param",
              "description": ". The only supported object is `transform`,\nwhich should be a valid {@link mapnik.ProjTransform} object.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}"
            },
            {
              "title": "param",
              "description": "called with (err, result)",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "memberof",
              "description": "mapnik.Geometry"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "toJSON"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 195,
                "column": 1
              },
              "end": {
                "line": 205,
                "column": 3
              }
            },
            "file": "src/mapnik_geometry.cpp",
            "path": "src/mapnik_geometry.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_geometry.cpp#L195-L205"
          },
          "params": [
            {
              "title": "param",
              "description": ". The only supported object is `transform`,\nwhich should be a valid {@link mapnik.ProjTransform} object.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}"
            },
            {
              "title": "param",
              "description": "called with (err, result)",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "memberof": "mapnik.Geometry",
          "scope": "instance",
          "name": "toJSON",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Geometry",
            "toJSON"
          ]
        },
        {
          "description": "Convert this geometry into a [GeoJSON](http://geojson.org/) representation,\nsynchronously.",
          "tags": [
            {
              "title": "returns",
              "description": "GeoJSON, string-encoded representation of this geometry.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "memberof",
              "description": "mapnik.Geometry"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "toJSONSync"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 108,
                "column": 1
              },
              "end": {
                "line": 116,
                "column": 3
              }
            },
            "file": "src/mapnik_geometry.cpp",
            "path": "src/mapnik_geometry.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_geometry.cpp#L108-L116"
          },
          "returns": [
            {
              "title": "returns",
              "description": "GeoJSON, string-encoded representation of this geometry.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "memberof": "mapnik.Geometry",
          "scope": "instance",
          "name": "toJSONSync",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Geometry",
            "toJSONSync"
          ]
        },
        {
          "description": "Get the geometry's representation as Well-Known Binary",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "toWKB"
            },
            {
              "title": "memberof",
              "description": "mapnik.Geometry"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "wkb representation of this geometry",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 362,
                "column": 1
              },
              "end": {
                "line": 369,
                "column": 3
              }
            },
            "file": "src/mapnik_geometry.cpp",
            "path": "src/mapnik_geometry.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_geometry.cpp#L362-L369"
          },
          "name": "toWKB",
          "memberof": "mapnik.Geometry",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "wkb representation of this geometry",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Geometry",
            "toWKB"
          ]
        },
        {
          "description": "Get the geometry's representation as [Well-Known Text](http://en.wikipedia.org/wiki/Well-known_text)",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "toWKT"
            },
            {
              "title": "memberof",
              "description": "mapnik.Geometry"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "wkt representation of this geometry",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 338,
                "column": 1
              },
              "end": {
                "line": 345,
                "column": 3
              }
            },
            "file": "src/mapnik_geometry.cpp",
            "path": "src/mapnik_geometry.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_geometry.cpp#L338-L345"
          },
          "name": "toWKT",
          "memberof": "mapnik.Geometry",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "wkt representation of this geometry",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Geometry",
            "toWKT"
          ]
        },
        {
          "description": "Get the geometry type",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "type"
            },
            {
              "title": "returns",
              "description": "type of geometry.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "memberof",
              "description": "mapnik.Geometry"
            },
            {
              "title": "instance",
              "description": null
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 93,
                "column": 1
              },
              "end": {
                "line": 100,
                "column": 3
              }
            },
            "file": "src/mapnik_geometry.cpp",
            "path": "src/mapnik_geometry.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_geometry.cpp#L93-L100"
          },
          "name": "type",
          "returns": [
            {
              "title": "returns",
              "description": "type of geometry.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "memberof": "mapnik.Geometry",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Geometry",
            "type"
          ]
        }
      ],
      "static": []
    },
    "events": [],
    "path": [
      "mapnik.Geometry"
    ]
  },
  {
    "description": "Generator for [UTFGrid](https://www.mapbox.com/guides/an-open-platform)\nrepresentations of data.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.Grid"
      },
      {
        "title": "class",
        "description": null,
        "type": null,
        "name": null
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "width"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "height"
      },
      {
        "title": "param",
        "description": "optional argument, which can have a 'key' property",
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Object"
          }
        },
        "name": "options",
        "default": "{}"
      },
      {
        "title": "property",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 17,
          "column": 1
        },
        "end": {
          "line": 27,
          "column": 3
        }
      },
      "file": "src/mapnik_grid.cpp",
      "path": "src/mapnik_grid.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_grid.cpp#L17-L27"
    },
    "name": "mapnik.Grid",
    "params": [
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "width"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "height"
      },
      {
        "title": "param",
        "description": "optional argument, which can have a 'key' property",
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Object"
          }
        },
        "name": "options",
        "default": "{}"
      }
    ],
    "properties": [
      {
        "title": "property",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      }
    ],
    "members": {
      "instance": [
        {
          "description": "Add a field to this grid's output",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Grid"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "addField"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "field"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 256,
                "column": 1
              },
              "end": {
                "line": 262,
                "column": 3
              }
            },
            "file": "src/mapnik_grid.cpp",
            "path": "src/mapnik_grid.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_grid.cpp#L256-L262"
          },
          "memberof": "mapnik.Grid",
          "scope": "instance",
          "name": "addField",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "field"
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Grid",
            "addField"
          ]
        },
        {
          "description": "Get all of this grid's fields",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Grid"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "addField"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 283,
                "column": 1
              },
              "end": {
                "line": 289,
                "column": 3
              }
            },
            "file": "src/mapnik_grid.cpp",
            "path": "src/mapnik_grid.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_grid.cpp#L283-L289"
          },
          "memberof": "mapnik.Grid",
          "scope": "instance",
          "name": "addField",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Grid",
            "addField"
          ]
        },
        {
          "description": "Get a constrained view of this field given x, y, width, height parameters.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Grid"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "encodeSync"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{ resolution: 4, features: false }"
            },
            {
              "title": "returns",
              "description": "an encoded field with `grid`, `keys`, and `data` members.",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 335,
                "column": 1
              },
              "end": {
                "line": 342,
                "column": 3
              }
            },
            "file": "src/mapnik_grid.cpp",
            "path": "src/mapnik_grid.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_grid.cpp#L335-L342"
          },
          "memberof": "mapnik.Grid",
          "scope": "instance",
          "name": "encodeSync",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{ resolution: 4, features: false }"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "an encoded field with `grid`, `keys`, and `data` members.",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Grid",
            "encodeSync"
          ]
        },
        {
          "description": "Get this grid's height",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Grid"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "height"
            },
            {
              "title": "returns",
              "description": "height",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 225,
                "column": 1
              },
              "end": {
                "line": 231,
                "column": 3
              }
            },
            "file": "src/mapnik_grid.cpp",
            "path": "src/mapnik_grid.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_grid.cpp#L225-L231"
          },
          "memberof": "mapnik.Grid",
          "scope": "instance",
          "name": "height",
          "returns": [
            {
              "title": "returns",
              "description": "height",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Grid",
            "height"
          ]
        },
        {
          "description": "Get a constrained view of this field given x, y, width, height parameters.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Grid"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "view"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            },
            {
              "title": "returns",
              "description": "a grid constrained to this new view",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Grid"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 307,
                "column": 1
              },
              "end": {
                "line": 317,
                "column": 3
              }
            },
            "file": "src/mapnik_grid.cpp",
            "path": "src/mapnik_grid.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_grid.cpp#L307-L317"
          },
          "memberof": "mapnik.Grid",
          "scope": "instance",
          "name": "view",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "a grid constrained to this new view",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Grid"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Grid",
            "view"
          ]
        },
        {
          "description": "Get this grid's width",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Grid"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "width"
            },
            {
              "title": "returns",
              "description": "width",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 212,
                "column": 1
              },
              "end": {
                "line": 218,
                "column": 3
              }
            },
            "file": "src/mapnik_grid.cpp",
            "path": "src/mapnik_grid.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_grid.cpp#L212-L218"
          },
          "memberof": "mapnik.Grid",
          "scope": "instance",
          "name": "width",
          "returns": [
            {
              "title": "returns",
              "description": "width",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Grid",
            "width"
          ]
        }
      ],
      "static": []
    },
    "events": [],
    "path": [
      "mapnik.Grid"
    ]
  },
  {
    "description": "Create a new image object (surface) that can be used for rendering data to.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.Image"
      },
      {
        "title": "class",
        "description": null,
        "type": null,
        "name": null
      },
      {
        "title": "param",
        "description": "width in pixels",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "width"
      },
      {
        "title": "param",
        "description": "height in pixels",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "height"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Object"
          }
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "a {@link mapnik.imageType} object",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "options.type",
            "default": "mapnik.imageType.rgb8"
          },
          {
            "title": "param",
            "description": null,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "bool"
              }
            },
            "name": "options.initialize",
            "default": "true"
          },
          {
            "title": "param",
            "description": null,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "bool"
              }
            },
            "name": "options.premultiplied",
            "default": "false"
          },
          {
            "title": "param",
            "description": null,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "bool"
              }
            },
            "name": "options.painted",
            "default": "false"
          }
        ]
      },
      {
        "title": "param",
        "description": "a {@link mapnik.imageType} object",
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Object"
          }
        },
        "name": "options.type",
        "default": "mapnik.imageType.rgb8"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "options.initialize",
        "default": "true"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "options.premultiplied",
        "default": "false"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "bool"
          }
        },
        "name": "options.painted",
        "default": "false"
      },
      {
        "title": "property",
        "description": "offset number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "offset"
      },
      {
        "title": "property",
        "description": "scaling number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "scaling"
      },
      {
        "title": "throws",
        "description": "if any argument is the wrong type, like if width\nor height is not numeric.",
        "type": {
          "type": "NameExpression",
          "name": "TypeError"
        }
      },
      {
        "title": "example",
        "description": "var im = new mapnik.Image(256, 256, {\n  premultiplied: true,\n  type: mapnik.imageType.gray8\n});"
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 50,
          "column": 1
        },
        "end": {
          "line": 70,
          "column": 3
        }
      },
      "file": "src/mapnik_image.cpp",
      "path": "src/mapnik_image.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L50-L70"
    },
    "name": "mapnik.Image",
    "params": [
      {
        "title": "param",
        "description": "width in pixels",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "width"
      },
      {
        "title": "param",
        "description": "height in pixels",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "height"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Object"
          }
        },
        "name": "options",
        "properties": [
          {
            "title": "param",
            "description": "a {@link mapnik.imageType} object",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            "name": "options.type",
            "default": "mapnik.imageType.rgb8"
          },
          {
            "title": "param",
            "description": null,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "bool"
              }
            },
            "name": "options.initialize",
            "default": "true"
          },
          {
            "title": "param",
            "description": null,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "bool"
              }
            },
            "name": "options.premultiplied",
            "default": "false"
          },
          {
            "title": "param",
            "description": null,
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "bool"
              }
            },
            "name": "options.painted",
            "default": "false"
          }
        ]
      }
    ],
    "properties": [
      {
        "title": "property",
        "description": "offset number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "offset"
      },
      {
        "title": "property",
        "description": "scaling number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "scaling"
      }
    ],
    "throws": [
      {
        "title": "throws",
        "description": "if any argument is the wrong type, like if width\nor height is not numeric.",
        "type": {
          "type": "NameExpression",
          "name": "TypeError"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> im = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">256</span>, {\n  premultiplied: <span class=\"hljs-literal\">true</span>,\n  type: mapnik.imageType.gray8\n});"
    ],
    "members": {
      "instance": [
        {
          "description": "Make this image transparent, removing all image data from it.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "clear"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(5,5);\nimg.fillSync(1);\nconsole.log(img.getPixel(0, 0)); // 1\nimg.clear(function(err, result) {\n  console.log(result.getPixel(0,0)); // 0\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1042,
                "column": 1
              },
              "end": {
                "line": 1056,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1042-L1056"
          },
          "name": "clear",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "memberof": "mapnik.Image",
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>);\nimg.fillSync(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-built_in\">console</span>.log(img.getPixel(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)); <span class=\"hljs-comment\">// 1</span>\nimg.clear(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, result</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(result.getPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)); <span class=\"hljs-comment\">// 0</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "clear"
          ]
        },
        {
          "description": "Make this image transparent. (synchronous)",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "clearSync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(5,5);\nimg.fillSync(1);\nconsole.log(img.getPixel(0, 0)); // 1\nimg.clearSync();\nconsole.log(img.getPixel(0, 0)); // 0"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1001,
                "column": 1
              },
              "end": {
                "line": 1013,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1001-L1013"
          },
          "name": "clearSync",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>);\nimg.fillSync(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-built_in\">console</span>.log(img.getPixel(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)); <span class=\"hljs-comment\">// 1</span>\nimg.clearSync();\n<span class=\"hljs-built_in\">console</span>.log(img.getPixel(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)); <span class=\"hljs-comment\">// 0</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "clearSync"
          ]
        },
        {
          "description": "Compare the pixels of one image to the pixels of another. Returns the number \nof pixels that are different. So, if the images are identical then it returns `0`. \nAnd if the images share no common pixels it returns the total number of pixels \nin an image which is equivalent to `im.width()*im.height()`.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "compare"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "param",
              "description": "another {@link mapnik.Image} instance to compare to",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              },
              "name": "image"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "A value that should be `0` or greater to \ndetermine if the pixels match. Defaults to 16 which means that `rgba(0,0,0,0)` \nwould be considered the same as `rgba(15,15,15,0)`.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.threshold",
                  "default": "16"
                },
                {
                  "title": "param",
                  "description": "`alpha` value, along with `rgb`, is considered \nwhen comparing pixels",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.alpha",
                  "default": "true"
                }
              ]
            },
            {
              "title": "param",
              "description": "A value that should be `0` or greater to \ndetermine if the pixels match. Defaults to 16 which means that `rgba(0,0,0,0)` \nwould be considered the same as `rgba(15,15,15,0)`.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.threshold",
              "default": "16"
            },
            {
              "title": "param",
              "description": "`alpha` value, along with `rgb`, is considered \nwhen comparing pixels",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "bool"
                }
              },
              "name": "options.alpha",
              "default": "true"
            },
            {
              "title": "returns",
              "description": "quantified visual difference between these two images in \"number of\npixels\" (i.e. `80` pixels are different);",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "example",
              "description": "// start with the exact same images\nvar img1 = new mapnik.Image(2,2);\nvar img2 = new mapnik.Image(2,2);\nconsole.log(img1.compare(img2)); // 0 \n\n// change 1 pixel in img2\nimg2.setPixel(0,0, new mapnik.Color('green'));\nconsole.log(img1.compare(img2)); // 1 \n\n// difference in color at first pixel\nimg1.setPixel(0,0, new mapnik.Color('red'));\nconsole.log(img1.compare(img2)); // 1 \n\n// two pixels different\nimg2.setPixel(0,1, new mapnik.Color('red'));\nconsole.log(img1.compare(img2)); // 2 \n\n// all pixels different\nimg2.setPixel(1,1, new mapnik.Color('blue'));\nimg2.setPixel(1,0, new mapnik.Color('blue'));\nconsole.log(img1.compare(img2)); // 4"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 549,
                "column": 1
              },
              "end": {
                "line": 589,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L549-L589"
          },
          "name": "compare",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "params": [
            {
              "title": "param",
              "description": "another {@link mapnik.Image} instance to compare to",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              },
              "name": "image"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "A value that should be `0` or greater to \ndetermine if the pixels match. Defaults to 16 which means that `rgba(0,0,0,0)` \nwould be considered the same as `rgba(15,15,15,0)`.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.threshold",
                  "default": "16"
                },
                {
                  "title": "param",
                  "description": "`alpha` value, along with `rgb`, is considered \nwhen comparing pixels",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.alpha",
                  "default": "true"
                }
              ]
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "quantified visual difference between these two images in \"number of\npixels\" (i.e. `80` pixels are different);",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-comment\">// start with the exact same images</span>\n<span class=\"hljs-keyword\">var</span> img1 = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-keyword\">var</span> img2 = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-built_in\">console</span>.log(img1.compare(img2)); <span class=\"hljs-comment\">// 0 </span>\n\n<span class=\"hljs-comment\">// change 1 pixel in img2</span>\nimg2.setPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'green'</span>));\n<span class=\"hljs-built_in\">console</span>.log(img1.compare(img2)); <span class=\"hljs-comment\">// 1 </span>\n\n<span class=\"hljs-comment\">// difference in color at first pixel</span>\nimg1.setPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'red'</span>));\n<span class=\"hljs-built_in\">console</span>.log(img1.compare(img2)); <span class=\"hljs-comment\">// 1 </span>\n\n<span class=\"hljs-comment\">// two pixels different</span>\nimg2.setPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'red'</span>));\n<span class=\"hljs-built_in\">console</span>.log(img1.compare(img2)); <span class=\"hljs-comment\">// 2 </span>\n\n<span class=\"hljs-comment\">// all pixels different</span>\nimg2.setPixel(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'blue'</span>));\nimg2.setPixel(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'blue'</span>));\n<span class=\"hljs-built_in\">console</span>.log(img1.compare(img2)); <span class=\"hljs-comment\">// 4</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "compare"
          ]
        },
        {
          "description": "Overlay this image with another image, creating a layered composite as\na new image",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "composite"
            },
            {
              "title": "param",
              "description": "image to composite with",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              },
              "name": "image"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "compositing operation. Must be an integer\nvalue that relates to a compositing operation.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "mapnik.compositeOp"
                    }
                  },
                  "name": "options.comp_op"
                },
                {
                  "title": "param",
                  "description": "opacity must be a floating point number between 0-1",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.opacity"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.dx"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.dy"
                },
                {
                  "title": "param",
                  "description": "a string of filter names",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.image_filters"
                }
              ]
            },
            {
              "title": "param",
              "description": "compositing operation. Must be an integer\nvalue that relates to a compositing operation.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "mapnik.compositeOp"
                }
              },
              "name": "options.comp_op"
            },
            {
              "title": "param",
              "description": "opacity must be a floating point number between 0-1",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.opacity"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.dx"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.dy"
            },
            {
              "title": "param",
              "description": "a string of filter names",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.image_filters"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "var img1 = new mapnik.Image.open('./path/to/image.png');\nvar img2 = new mapnik.Image.open('./path/to/another-image.png');\nimg1.composite(img2, {\n  comp_op: mapnik.compositeOp['multiply'],\n  dx: 0,\n  dy: 0,\n  opacity: 0.5,\n  image_filters: 'invert agg-stack-blur(10,10)'\n}, function(err, result) {\n  if (err) throw err;\n  // new image with `result`\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3800,
                "column": 1
              },
              "end": {
                "line": 3829,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L3800-L3829"
          },
          "name": "composite",
          "params": [
            {
              "title": "param",
              "description": "image to composite with",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              },
              "name": "image"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "compositing operation. Must be an integer\nvalue that relates to a compositing operation.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "mapnik.compositeOp"
                    }
                  },
                  "name": "options.comp_op"
                },
                {
                  "title": "param",
                  "description": "opacity must be a floating point number between 0-1",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.opacity"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.dx"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.dy"
                },
                {
                  "title": "param",
                  "description": "a string of filter names",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.image_filters"
                }
              ]
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "scope": "instance",
          "memberof": "mapnik.Image",
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img1 = <span class=\"hljs-keyword\">new</span> mapnik.Image.open(<span class=\"hljs-string\">'./path/to/image.png'</span>);\n<span class=\"hljs-keyword\">var</span> img2 = <span class=\"hljs-keyword\">new</span> mapnik.Image.open(<span class=\"hljs-string\">'./path/to/another-image.png'</span>);\nimg1.composite(img2, {\n  comp_op: mapnik.compositeOp[<span class=\"hljs-string\">'multiply'</span>],\n  dx: <span class=\"hljs-number\">0</span>,\n  dy: <span class=\"hljs-number\">0</span>,\n  opacity: <span class=\"hljs-number\">0.5</span>,\n  image_filters: <span class=\"hljs-string\">'invert agg-stack-blur(10,10)'</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, result</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// new image with `result`</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "composite"
          ]
        },
        {
          "description": "Copy an image into a new image by creating a clone",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "copy"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "param",
              "description": "image type to clone into, can be any mapnik.imageType number",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "type"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}",
              "properties": [
                {
                  "title": "param",
                  "description": "scale the image",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scaling"
                },
                {
                  "title": "param",
                  "description": "offset this image",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset"
                }
              ]
            },
            {
              "title": "param",
              "description": "scale the image",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.scaling"
            },
            {
              "title": "param",
              "description": "offset this image",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.offset"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(4, 4, {type: mapnik.imageType.gray16});\nvar img2 = img.copy(mapnik.imageType.gray8, function(err, img2) {\n  if (err) throw err;\n  // custom code with `img2` converted into gray8 type\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1455,
                "column": 1
              },
              "end": {
                "line": 1471,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1455-L1471"
          },
          "name": "copy",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "params": [
            {
              "title": "param",
              "description": "image type to clone into, can be any mapnik.imageType number",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "type"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}",
              "properties": [
                {
                  "title": "param",
                  "description": "scale the image",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scaling"
                },
                {
                  "title": "param",
                  "description": "offset this image",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset"
                }
              ]
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, {type: mapnik.imageType.gray16});\n<span class=\"hljs-keyword\">var</span> img2 = img.copy(mapnik.imageType.gray8, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, img2</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// custom code with `img2` converted into gray8 type</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "copy"
          ]
        },
        {
          "description": "Copy an image into a new image by creating a clone",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "copySync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "param",
              "description": "image type to clone into, can be any mapnik.imageType number",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "type"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}",
              "properties": [
                {
                  "title": "param",
                  "description": "scale the image",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scaling"
                },
                {
                  "title": "param",
                  "description": "offset this image",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset"
                }
              ]
            },
            {
              "title": "param",
              "description": "scale the image",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.scaling"
            },
            {
              "title": "param",
              "description": "offset this image",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.offset"
            },
            {
              "title": "returns",
              "description": "copy",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(4, 4, {type: mapnik.imageType.gray16});\nvar img2 = img.copy(mapnik.imageType.gray8);\n// custom code with `img2` as a gray8 type"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1621,
                "column": 1
              },
              "end": {
                "line": 1635,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1621-L1635"
          },
          "name": "copySync",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "params": [
            {
              "title": "param",
              "description": "image type to clone into, can be any mapnik.imageType number",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "type"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}",
              "properties": [
                {
                  "title": "param",
                  "description": "scale the image",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scaling"
                },
                {
                  "title": "param",
                  "description": "offset this image",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset"
                }
              ]
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "copy",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, {type: mapnik.imageType.gray16});\n<span class=\"hljs-keyword\">var</span> img2 = img.copy(mapnik.imageType.gray8);\n<span class=\"hljs-comment\">// custom code with `img2` as a gray8 type</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "copySync"
          ]
        },
        {
          "description": "Return a copy of the pixel data in this image as a buffer",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "data"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "returns",
              "description": "pixel data as a buffer",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              }
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image.open('./path/to/image.png');\nvar buffr = img.data();"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 4060,
                "column": 1
              },
              "end": {
                "line": 4070,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L4060-L4070"
          },
          "name": "data",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "returns": [
            {
              "title": "returns",
              "description": "pixel data as a buffer",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image.open(<span class=\"hljs-string\">'./path/to/image.png'</span>);\n<span class=\"hljs-keyword\">var</span> buffr = img.data();"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "data"
          ]
        },
        {
          "description": "Demultiply the pixels in this image, asynchronously. The opposite of\npremultiplying",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "demultiply"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1282,
                "column": 1
              },
              "end": {
                "line": 1290,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1282-L1290"
          },
          "name": "demultiply",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "scope": "instance",
          "memberof": "mapnik.Image",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "demultiply"
          ]
        },
        {
          "description": "Demultiply the pixels in this image. The opposite of\npremultiplying.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "demultiplySync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1261,
                "column": 1
              },
              "end": {
                "line": 1268,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1261-L1268"
          },
          "name": "demultiplySync",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "demultiplySync"
          ]
        },
        {
          "description": "Encode this image into a buffer of encoded data",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "encode"
            },
            {
              "title": "param",
              "description": "image format",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "format",
              "default": "png"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "mapnik.Palette object",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "mapnik.Palette"
                    }
                  },
                  "name": "options.palette"
                }
              ]
            },
            {
              "title": "param",
              "description": "mapnik.Palette object",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "mapnik.Palette"
                }
              },
              "name": "options.palette"
            },
            {
              "title": "param",
              "description": "`function(err, encoded)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "returns",
              "description": "encoded image data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              }
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image.open('./path/to/image.png');\nmyImage.encode('png', function(err, encoded) {\n  if (err) throw err;   \n  // write buffer to new file\n  fs.writeFileSync('myimage.png', encoded);\n});\n\n// encoding an image object with a mapnik.Palette\nvar im = new mapnik.Image(256, 256);\nvar pal = new mapnik.Palette(new Buffer('\\xff\\x09\\x93\\xFF\\x01\\x02\\x03\\x04','ascii'));\nim.encode('png', {palette: pal}, function(err, encode) {\n  if (err) throw err;\n  // your custom code with `encode` image buffer  \n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3453,
                "column": 1
              },
              "end": {
                "line": 3479,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L3453-L3479"
          },
          "name": "encode",
          "params": [
            {
              "title": "param",
              "description": "image format",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "format",
              "default": "png"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "mapnik.Palette object",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "mapnik.Palette"
                    }
                  },
                  "name": "options.palette"
                }
              ]
            },
            {
              "title": "param",
              "description": "`function(err, encoded)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "encoded image data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              }
            }
          ],
          "scope": "instance",
          "memberof": "mapnik.Image",
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image.open(<span class=\"hljs-string\">'./path/to/image.png'</span>);\nmyImage.encode(<span class=\"hljs-string\">'png'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, encoded</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;   \n  <span class=\"hljs-comment\">// write buffer to new file</span>\n  fs.writeFileSync(<span class=\"hljs-string\">'myimage.png'</span>, encoded);\n});\n\n<span class=\"hljs-comment\">// encoding an image object with a mapnik.Palette</span>\n<span class=\"hljs-keyword\">var</span> im = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">256</span>);\n<span class=\"hljs-keyword\">var</span> pal = <span class=\"hljs-keyword\">new</span> mapnik.Palette(<span class=\"hljs-keyword\">new</span> Buffer(<span class=\"hljs-string\">'\\xff\\x09\\x93\\xFF\\x01\\x02\\x03\\x04'</span>,<span class=\"hljs-string\">'ascii'</span>));\nim.encode(<span class=\"hljs-string\">'png'</span>, {palette: pal}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, encode</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// your custom code with `encode` image buffer  </span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "encode"
          ]
        },
        {
          "description": "Encode this image into a buffer of encoded data (synchronous)",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "encodeSync"
            },
            {
              "title": "param",
              "description": "image format",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "format",
              "default": "png"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "mapnik.Palette object",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "mapnik.Palette"
                    }
                  },
                  "name": "options.palette"
                }
              ]
            },
            {
              "title": "param",
              "description": "mapnik.Palette object",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "mapnik.Palette"
                }
              },
              "name": "options.palette"
            },
            {
              "title": "returns",
              "description": "buffer - encoded image data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              }
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image.open('./path/to/image.png');\nvar buffer = img.encodeSync('png');\n// write buffer to a new file\nfs.writeFileSync('myimage.png', buffer);"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3366,
                "column": 1
              },
              "end": {
                "line": 3381,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L3366-L3381"
          },
          "name": "encodeSync",
          "params": [
            {
              "title": "param",
              "description": "image format",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "format",
              "default": "png"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "mapnik.Palette object",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "mapnik.Palette"
                    }
                  },
                  "name": "options.palette"
                }
              ]
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "buffer - encoded image data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              }
            }
          ],
          "scope": "instance",
          "memberof": "mapnik.Image",
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image.open(<span class=\"hljs-string\">'./path/to/image.png'</span>);\n<span class=\"hljs-keyword\">var</span> buffer = img.encodeSync(<span class=\"hljs-string\">'png'</span>);\n<span class=\"hljs-comment\">// write buffer to a new file</span>\nfs.writeFileSync(<span class=\"hljs-string\">'myimage.png'</span>, buffer);"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "encodeSync"
          ]
        },
        {
          "description": "Fill this image with a given color. Changes all pixel values.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "fill"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.Color"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "color"
            },
            {
              "title": "param",
              "description": "`function(err, img)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(5,5);\nimg.fill(new mapnik.Color('blue'), function(err, img) {\n  if (err) throw err;\n  var colors = img.getPixel(0,0, {get_color: true});\n  pixel is colored blue\n  console.log(color.b); // 255   \n});\n\n// or fill with rgb string\nimg.fill('rgba(255,255,255,0)', function(err, img) { ... });"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 869,
                "column": 1
              },
              "end": {
                "line": 888,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L869-L888"
          },
          "name": "fill",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.Color"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "color"
            },
            {
              "title": "param",
              "description": "`function(err, img)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>);\nimg.fill(<span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'blue'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, img</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-keyword\">var</span> colors = img.getPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>, {get_color: <span class=\"hljs-literal\">true</span>});\n  pixel is colored blue\n  <span class=\"hljs-built_in\">console</span>.log(color.b); <span class=\"hljs-comment\">// 255   </span>\n});\n\n<span class=\"hljs-comment\">// or fill with rgb string</span>\nimg.fill(<span class=\"hljs-string\">'rgba(255,255,255,0)'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, img</span>) </span>{ ... });"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "fill"
          ]
        },
        {
          "description": "Fill this image with a given color. Changes all pixel values. (synchronous)",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "fillSync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.Color"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "color"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(5,5);\n// blue pixels\nimg.fillSync(new mapnik.Color('blue'));\nvar colors = img.getPixel(0,0, {get_color: true});\n// blue value is filled\nconsole.log(colors.b); // 255"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 778,
                "column": 1
              },
              "end": {
                "line": 792,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L778-L792"
          },
          "name": "fillSync",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.Color"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "color"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-comment\">// blue pixels</span>\nimg.fillSync(<span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'blue'</span>));\n<span class=\"hljs-keyword\">var</span> colors = img.getPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>, {get_color: <span class=\"hljs-literal\">true</span>});\n<span class=\"hljs-comment\">// blue value is filled</span>\n<span class=\"hljs-built_in\">console</span>.log(colors.b); <span class=\"hljs-comment\">// 255</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "fillSync"
          ]
        },
        {
          "description": "Apply a filter to this image. Changes all pixel values.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "filter"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "param",
              "description": "can be `blur`, `emboss`, `sharpen`, \n`sobel`, or `gray`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "filter"
            },
            {
              "title": "param",
              "description": "`function(err, img)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(5, 5);\nimg.filter('sobel', function(err, img) {\n  if (err) throw err;\n  // your custom `img` with sobel filter\n  // https://en.wikipedia.org/wiki/Sobel_operator\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 695,
                "column": 1
              },
              "end": {
                "line": 711,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L695-L711"
          },
          "name": "filter",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "params": [
            {
              "title": "param",
              "description": "can be `blur`, `emboss`, `sharpen`, \n`sobel`, or `gray`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "filter"
            },
            {
              "title": "param",
              "description": "`function(err, img)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>);\nimg.filter(<span class=\"hljs-string\">'sobel'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, img</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// your custom `img` with sobel filter</span>\n  <span class=\"hljs-comment\">// https://en.wikipedia.org/wiki/Sobel_operator</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "filter"
          ]
        },
        {
          "description": "Apply a filter to this image. This changes all pixel values. (synchronous)",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "filterSync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "param",
              "description": "can be `blur`, `emboss`, `sharpen`, \n`sobel`, or `gray`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "filter"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(5, 5);\nimg.filter('blur');\n// your custom code with `img` having blur applied"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 644,
                "column": 1
              },
              "end": {
                "line": 656,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L644-L656"
          },
          "name": "filterSync",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "params": [
            {
              "title": "param",
              "description": "can be `blur`, `emboss`, `sharpen`, \n`sobel`, or `gray`.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "filter"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>);\nimg.filter(<span class=\"hljs-string\">'blur'</span>);\n<span class=\"hljs-comment\">// your custom code with `img` having blur applied</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "filterSync"
          ]
        },
        {
          "description": "Create an image from a byte stream buffer. (synchronous)",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "fromBytesSync"
            },
            {
              "title": "param",
              "description": "image buffer",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "returns",
              "description": "image object",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "var buffer = fs.readFileSync('./path/to/image.png');\nvar img = new mapnik.Image.fromBytesSync(buffer);"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3202,
                "column": 1
              },
              "end": {
                "line": 3213,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L3202-L3213"
          },
          "name": "fromBytesSync",
          "params": [
            {
              "title": "param",
              "description": "image buffer",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "image object",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            }
          ],
          "scope": "instance",
          "memberof": "mapnik.Image",
          "examples": [
            "<span class=\"hljs-keyword\">var</span> buffer = fs.readFileSync(<span class=\"hljs-string\">'./path/to/image.png'</span>);\n<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image.fromBytesSync(buffer);"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "fromBytesSync"
          ]
        },
        {
          "description": "Get a specific pixel and its value",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "getPixel"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "param",
              "description": "position within image from top left",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": "position within image from top left",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": "the only valid option is `get_color`, which\nshould be a `boolean`. If set, the return is an Object with `rgba` values\ninstead of a pixel number.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options"
            },
            {
              "title": "returns",
              "description": "color number or object of rgba values",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  {
                    "type": "NameExpression",
                    "name": "Object"
                  }
                ]
              }
            },
            {
              "title": "example",
              "description": "// check for color after rendering image\nvar img = new mapnik.Image(4, 4);\nvar map = new mapnik.Map(4, 4);\nmap.background = new mapnik.Color('green');\nmap.render(img, {},function(err, img) {\n  console.log(img.painted()); // false\n  var pixel = img.getPixel(0,0);\n  var values = img.getPixel(0,0, {get_color: true});\n  console.log(pixel); // 4278222848\n  console.log(values); // { premultiplied: false, a: 255, b: 0, g: 128, r: 0 }\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 406,
                "column": 1
              },
              "end": {
                "line": 429,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L406-L429"
          },
          "name": "getPixel",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "params": [
            {
              "title": "param",
              "description": "position within image from top left",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": "position within image from top left",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": "the only valid option is `get_color`, which\nshould be a `boolean`. If set, the return is an Object with `rgba` values\ninstead of a pixel number.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "color number or object of rgba values",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  },
                  {
                    "type": "NameExpression",
                    "name": "Object"
                  }
                ]
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-comment\">// check for color after rendering image</span>\n<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>);\n<span class=\"hljs-keyword\">var</span> map = <span class=\"hljs-keyword\">new</span> mapnik.Map(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>);\nmap.background = <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'green'</span>);\nmap.render(img, {},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, img</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(img.painted()); <span class=\"hljs-comment\">// false</span>\n  <span class=\"hljs-keyword\">var</span> pixel = img.getPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-keyword\">var</span> values = img.getPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>, {get_color: <span class=\"hljs-literal\">true</span>});\n  <span class=\"hljs-built_in\">console</span>.log(pixel); <span class=\"hljs-comment\">// 4278222848</span>\n  <span class=\"hljs-built_in\">console</span>.log(values); <span class=\"hljs-comment\">// { premultiplied: false, a: 255, b: 0, g: 128, r: 0 }</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "getPixel"
          ]
        },
        {
          "description": "Determine the image type",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "getType"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "Number of the image type",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(256, 256, {\n  type: mapnik.imageType.gray8\n});\nvar type = img.getType();\nvar typeCheck = mapnik.imageType.gray8;\nconsole.log(type, typeCheck); // 1, 1"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 285,
                "column": 1
              },
              "end": {
                "line": 299,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L285-L299"
          },
          "name": "getType",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "Number of the image type",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "memberof": "mapnik.Image",
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">256</span>, {\n  type: mapnik.imageType.gray8\n});\n<span class=\"hljs-keyword\">var</span> type = img.getType();\n<span class=\"hljs-keyword\">var</span> typeCheck = mapnik.imageType.gray8;\n<span class=\"hljs-built_in\">console</span>.log(type, typeCheck); <span class=\"hljs-comment\">// 1, 1</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "getType"
          ]
        },
        {
          "description": "Get this image's height in pixels",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "height"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "returns",
              "description": "height",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(4,4);\nconsole.log(img.height()); // 4"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2305,
                "column": 1
              },
              "end": {
                "line": 2315,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L2305-L2315"
          },
          "name": "height",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "returns": [
            {
              "title": "returns",
              "description": "height",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>);\n<span class=\"hljs-built_in\">console</span>.log(img.height()); <span class=\"hljs-comment\">// 4</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "height"
          ]
        },
        {
          "description": "Test if an image's pixels are all exactly the same",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "isSolid"
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "`true` means all pixels are exactly the same",
              "type": {
                "type": "NameExpression",
                "name": "bool"
              }
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(2,2);\nconsole.log(img.isSolid()); // true\n\n// change a pixel\nimg.setPixel(0,0, new mapnik.Color('green'));\nconsole.log(img.isSolid()); // false"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1330,
                "column": 1
              },
              "end": {
                "line": 1343,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1330-L1343"
          },
          "name": "isSolid",
          "memberof": "mapnik.Image",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "`true` means all pixels are exactly the same",
              "type": {
                "type": "NameExpression",
                "name": "bool"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-built_in\">console</span>.log(img.isSolid()); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// change a pixel</span>\nimg.setPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'green'</span>));\n<span class=\"hljs-built_in\">console</span>.log(img.isSolid()); <span class=\"hljs-comment\">// false</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "isSolid"
          ]
        },
        {
          "description": "Determine whether the image is solid - whether it has alpha values of greater\nthan one.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "isSolidSync"
            },
            {
              "title": "returns",
              "description": "whether the image is solid",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(256, 256);\nvar view = img.view(0, 0, 256, 256);\nconsole.log(view.isSolidSync()); // true"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1413,
                "column": 1
              },
              "end": {
                "line": 1425,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1413-L1425"
          },
          "name": "isSolidSync",
          "returns": [
            {
              "title": "returns",
              "description": "whether the image is solid",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "scope": "instance",
          "memberof": "mapnik.Image",
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">256</span>);\n<span class=\"hljs-keyword\">var</span> view = img.view(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">256</span>);\n<span class=\"hljs-built_in\">console</span>.log(view.isSolidSync()); <span class=\"hljs-comment\">// true</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "isSolidSync"
          ]
        },
        {
          "description": "Load in a pre-existing image as an image object",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "openSync"
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "path to the image you want to load",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "path"
            },
            {
              "title": "returns",
              "description": "new image object based on existing image",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image.open('./path/to/image.jpg');"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2322,
                "column": 1
              },
              "end": {
                "line": 2331,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L2322-L2331"
          },
          "name": "openSync",
          "memberof": "mapnik.Image",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "path to the image you want to load",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "path"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "new image object based on existing image",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image.open(<span class=\"hljs-string\">'./path/to/image.jpg'</span>);"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "openSync"
          ]
        },
        {
          "description": "Check if this image is painted. \"Painted\" refers to if it has\ndata or not. An image created with `new mapnik.Image(4,4)` defaults to\n`false` since we loaded a new image without rendering and have no idea\nif it was painted or not. You can run `new mapnik.Image(4, 4, {painted: true})`\nto manually set the `painted` value.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "painted"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "returns",
              "description": "whether it is painted or not",
              "type": {
                "type": "NameExpression",
                "name": "bool"
              }
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(5,5);\nconsole.log(img.painted()); // false"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2267,
                "column": 1
              },
              "end": {
                "line": 2281,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L2267-L2281"
          },
          "name": "painted",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "returns": [
            {
              "title": "returns",
              "description": "whether it is painted or not",
              "type": {
                "type": "NameExpression",
                "name": "bool"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-built_in\">console</span>.log(img.painted()); <span class=\"hljs-comment\">// false</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "painted"
          ]
        },
        {
          "description": "Determine whether the given image is premultiplied.\nhttps://en.wikipedia.org/wiki/Alpha_compositing",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "premultiplied"
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "premultiplied `true` if the image is premultiplied",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(5,5);\nconsole.log(img.premultiplied()); // false\nimg.premultiplySync()\nconsole.log(img.premultiplied()); // true"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1162,
                "column": 1
              },
              "end": {
                "line": 1175,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1162-L1175"
          },
          "name": "premultiplied",
          "memberof": "mapnik.Image",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "premultiplied `true` if the image is premultiplied",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-built_in\">console</span>.log(img.premultiplied()); <span class=\"hljs-comment\">// false</span>\nimg.premultiplySync()\n<span class=\"hljs-built_in\">console</span>.log(img.premultiplied()); <span class=\"hljs-comment\">// true</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "premultiplied"
          ]
        },
        {
          "description": "Premultiply the pixels in this image, asynchronously",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "premultiply"
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(5,5);\nimg.premultiply(function(err, img) {\n  if (err) throw err;   \n  // your custom code with premultiplied img\n})"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1206,
                "column": 1
              },
              "end": {
                "line": 1219,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1206-L1219"
          },
          "name": "premultiply",
          "memberof": "mapnik.Image",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>);\nimg.premultiply(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, img</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;   \n  <span class=\"hljs-comment\">// your custom code with premultiplied img</span>\n})"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "premultiply"
          ]
        },
        {
          "description": "Premultiply the pixels in this image.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "premultiplySync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(5,5);\nimg.premultiplySync();\nconsole.log(img.premultiplied()); // true"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1183,
                "column": 1
              },
              "end": {
                "line": 1193,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1183-L1193"
          },
          "name": "premultiplySync",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>);\nimg.premultiplySync();\n<span class=\"hljs-built_in\">console</span>.log(img.premultiplied()); <span class=\"hljs-comment\">// true</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "premultiplySync"
          ]
        },
        {
          "description": "Resize this image (makes a copy)",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "resize"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "param",
              "description": "in pixels",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": "in pixels",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}",
              "properties": [
                {
                  "title": "param",
                  "description": "offset the image horizontally in pixels",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset_x",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "offset the image vertically in pixels",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset_y",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "scaling method",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "mapnik.imageScaling"
                    }
                  },
                  "name": "options.scaling_method",
                  "default": "mapnik.imageScaling.near"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.filter_factor",
                  "default": "1.0"
                }
              ]
            },
            {
              "title": "param",
              "description": "offset the image horizontally in pixels",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.offset_x",
              "default": "0"
            },
            {
              "title": "param",
              "description": "offset the image vertically in pixels",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.offset_y",
              "default": "0"
            },
            {
              "title": "param",
              "description": "scaling method",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "mapnik.imageScaling"
                }
              },
              "name": "options.scaling_method",
              "default": "mapnik.imageScaling.near"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.filter_factor",
              "default": "1.0"
            },
            {
              "title": "param",
              "description": "`function(err, result)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(4, 4, {type: mapnik.imageType.gray8});\nimg.resize(8, 8, function(err, result) {\n  if (err) throw err;\n  // new image object as `result`\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1754,
                "column": 1
              },
              "end": {
                "line": 1774,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1754-L1774"
          },
          "name": "resize",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "params": [
            {
              "title": "param",
              "description": "in pixels",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": "in pixels",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}",
              "properties": [
                {
                  "title": "param",
                  "description": "offset the image horizontally in pixels",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset_x",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "offset the image vertically in pixels",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset_y",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "scaling method",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "mapnik.imageScaling"
                    }
                  },
                  "name": "options.scaling_method",
                  "default": "mapnik.imageScaling.near"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.filter_factor",
                  "default": "1.0"
                }
              ]
            },
            {
              "title": "param",
              "description": "`function(err, result)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, {type: mapnik.imageType.gray8});\nimg.resize(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, result</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// new image object as `result`</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "resize"
          ]
        },
        {
          "description": "Resize this image (makes a copy). Synchronous version of {@link mapnik.Image.resize}.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "resizeSync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}",
              "properties": [
                {
                  "title": "param",
                  "description": "offset the image horizontally in pixels",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset_x",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "offset the image vertically in pixels",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset_y",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "scaling method",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "mapnik.imageScaling"
                    }
                  },
                  "name": "options.scaling_method",
                  "default": "mapnik.imageScaling.near"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.filter_factor",
                  "default": "1.0"
                }
              ]
            },
            {
              "title": "param",
              "description": "offset the image horizontally in pixels",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.offset_x",
              "default": "0"
            },
            {
              "title": "param",
              "description": "offset the image vertically in pixels",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.offset_y",
              "default": "0"
            },
            {
              "title": "param",
              "description": "scaling method",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "mapnik.imageScaling"
                }
              },
              "name": "options.scaling_method",
              "default": "mapnik.imageScaling.near"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.filter_factor",
              "default": "1.0"
            },
            {
              "title": "returns",
              "description": "copy",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(4, 4, {type: mapnik.imageType.gray8});\nvar img2 = img.resizeSync(8, 8);\n// new copy as `img2`"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2082,
                "column": 1
              },
              "end": {
                "line": 2100,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L2082-L2100"
          },
          "name": "resizeSync",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}",
              "properties": [
                {
                  "title": "param",
                  "description": "offset the image horizontally in pixels",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset_x",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "offset the image vertically in pixels",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset_y",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "scaling method",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "mapnik.imageScaling"
                    }
                  },
                  "name": "options.scaling_method",
                  "default": "mapnik.imageScaling.near"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.filter_factor",
                  "default": "1.0"
                }
              ]
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "copy",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, {type: mapnik.imageType.gray8});\n<span class=\"hljs-keyword\">var</span> img2 = img.resizeSync(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>);\n<span class=\"hljs-comment\">// new copy as `img2`</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "resizeSync"
          ]
        },
        {
          "description": "Encode this image and save it to disk as a file.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "save"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "filename"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "format",
              "default": "png"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "img.save('image.png', 'png', function(err) {\n  if (err) throw err;\n  // your custom code   \n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3687,
                "column": 1
              },
              "end": {
                "line": 3701,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L3687-L3701"
          },
          "name": "save",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "filename"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "format",
              "default": "png"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "scope": "instance",
          "memberof": "mapnik.Image",
          "examples": [
            "img.save(<span class=\"hljs-string\">'image.png'</span>, <span class=\"hljs-string\">'png'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// your custom code   </span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "save"
          ]
        },
        {
          "description": "Encode this image and save it to disk as a file.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "saveSync"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "filename"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "format",
              "default": "png"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "img.saveSync('foo.png');"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3620,
                "column": 1
              },
              "end": {
                "line": 3630,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L3620-L3630"
          },
          "name": "saveSync",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "filename"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "format",
              "default": "png"
            }
          ],
          "scope": "instance",
          "memberof": "mapnik.Image",
          "examples": [
            "img.saveSync(<span class=\"hljs-string\">'foo.png'</span>);"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "saveSync"
          ]
        },
        {
          "description": "Convert all grayscale values to alpha values. Great for creating\na mask layer based on alpha values.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "setGrayScaleToAlpha"
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Color"
              },
              "name": "color"
            },
            {
              "title": "example",
              "description": "var image = new mapnik.Image(2,2);\nimage.fillSync(new mapnik.Color('rgba(0,0,0,255)'));\nconsole.log(image.getPixel(0,0, {get_color:true})); // { premultiplied: false, a: 255, b: 0, g: 0, r: 0 }\n\nimage.setGrayScaleToAlpha();\n// turns a black pixel into a completely transparent mask\nconsole.log(image.getPixel(0,0, {get_color:true})); // { premultiplied: false, a: 0, b: 255, g: 255, r: 255 }"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1114,
                "column": 1
              },
              "end": {
                "line": 1130,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L1114-L1130"
          },
          "name": "setGrayScaleToAlpha",
          "memberof": "mapnik.Image",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Color"
              },
              "name": "color"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> image = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>);\nimage.fillSync(<span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'rgba(0,0,0,255)'</span>));\n<span class=\"hljs-built_in\">console</span>.log(image.getPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>, {get_color:<span class=\"hljs-literal\">true</span>})); <span class=\"hljs-comment\">// { premultiplied: false, a: 255, b: 0, g: 0, r: 0 }</span>\n\nimage.setGrayScaleToAlpha();\n<span class=\"hljs-comment\">// turns a black pixel into a completely transparent mask</span>\n<span class=\"hljs-built_in\">console</span>.log(image.getPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>, {get_color:<span class=\"hljs-literal\">true</span>})); <span class=\"hljs-comment\">// { premultiplied: false, a: 0, b: 255, g: 255, r: 255 }</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "setGrayScaleToAlpha"
          ]
        },
        {
          "description": "Set a pixels value",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "setPixel"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "param",
              "description": "position within image from top left",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": "position within image from top left",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": "or object representation of a color, typically used with {@link mapnik.Color}",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "Object"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "numeric"
            },
            {
              "title": "example",
              "description": "var gray = new mapnik.Image(256, 256);\ngray.setPixel(0,0,new mapnik.Color('white'));\nvar pixel = gray.getPixel(0,0,{get_color:true});\nconsole.log(pixel); // { premultiplied: false, a: 255, b: 255, g: 255, r: 255 }"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 486,
                "column": 1
              },
              "end": {
                "line": 499,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L486-L499"
          },
          "name": "setPixel",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "params": [
            {
              "title": "param",
              "description": "position within image from top left",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": "position within image from top left",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": "or object representation of a color, typically used with {@link mapnik.Color}",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "Object"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "numeric"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> gray = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">256</span>);\ngray.setPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">new</span> mapnik.Color(<span class=\"hljs-string\">'white'</span>));\n<span class=\"hljs-keyword\">var</span> pixel = gray.getPixel(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,{get_color:<span class=\"hljs-literal\">true</span>});\n<span class=\"hljs-built_in\">console</span>.log(pixel); <span class=\"hljs-comment\">// { premultiplied: false, a: 255, b: 255, g: 255, r: 255 }</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "setPixel"
          ]
        },
        {
          "description": "Get a constrained view of this image given x, y, width, height parameters.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "view"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            },
            {
              "title": "returns",
              "description": "an image constrained to this new view",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(10, 10);\n// This function says \"starting from the 0/0 pixel, grab 5 pixels along\n// the x-axis and 5 along the y-axis\" which gives us a quarter of the original\n// 10x10 pixel image\nvar img2 = img.view(0, 0, 5, 5);\nconsole.log(img.width(), img2.width()); // 10, 5"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3585,
                "column": 1
              },
              "end": {
                "line": 3602,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L3585-L3602"
          },
          "memberof": "mapnik.Image",
          "scope": "instance",
          "name": "view",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "x"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "y"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "an image constrained to this new view",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>);\n<span class=\"hljs-comment\">// This function says \"starting from the 0/0 pixel, grab 5 pixels along</span>\n<span class=\"hljs-comment\">// the x-axis and 5 along the y-axis\" which gives us a quarter of the original</span>\n<span class=\"hljs-comment\">// 10x10 pixel image</span>\n<span class=\"hljs-keyword\">var</span> img2 = img.view(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>);\n<span class=\"hljs-built_in\">console</span>.log(img.width(), img2.width()); <span class=\"hljs-comment\">// 10, 5</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "view"
          ]
        },
        {
          "description": "Get this image's width in pixels",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "width"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "returns",
              "description": "width",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image(4,4);\nconsole.log(img.width()); // 4"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2288,
                "column": 1
              },
              "end": {
                "line": 2298,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L2288-L2298"
          },
          "name": "width",
          "scope": "instance",
          "memberof": "mapnik.Image",
          "returns": [
            {
              "title": "returns",
              "description": "width",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">4</span>);\n<span class=\"hljs-built_in\">console</span>.log(img.width()); <span class=\"hljs-comment\">// 4</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "width"
          ]
        }
      ],
      "static": [
        {
          "description": "Create an image of the existing buffer. \n\nNote: the buffer must live as long as the image. \nIt is recommended that you do not use this method. Be warned!",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "fromBufferSync"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "returns",
              "description": "image object",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "var img = new mapnik.Image.open('./path/to/image.png');\nvar buffer = img.data(); // returns data as buffer\nvar img2 = mapnik.Image.fromBufferSync(img.width(), img.height(), buffer);"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3081,
                "column": 1
              },
              "end": {
                "line": 3098,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L3081-L3098"
          },
          "name": "fromBufferSync",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "image object",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            }
          ],
          "scope": "static",
          "memberof": "mapnik.Image",
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-keyword\">new</span> mapnik.Image.open(<span class=\"hljs-string\">'./path/to/image.png'</span>);\n<span class=\"hljs-keyword\">var</span> buffer = img.data(); <span class=\"hljs-comment\">// returns data as buffer</span>\n<span class=\"hljs-keyword\">var</span> img2 = mapnik.Image.fromBufferSync(img.width(), img.height(), buffer);"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "fromBufferSync"
          ]
        },
        {
          "description": "Create an image from a byte stream buffer.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "fromBytes"
            },
            {
              "title": "param",
              "description": "image buffer",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "param",
              "description": "`function(err, img)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "var buffer = fs.readFileSync('./path/to/image.png');\nmapnik.Image.fromBytesSync(buffer, function(err, img) {\n  if (err) throw err;\n  // your custom code with `img` object   \n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3259,
                "column": 1
              },
              "end": {
                "line": 3273,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L3259-L3273"
          },
          "name": "fromBytes",
          "params": [
            {
              "title": "param",
              "description": "image buffer",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "param",
              "description": "`function(err, img)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "scope": "static",
          "memberof": "mapnik.Image",
          "examples": [
            "<span class=\"hljs-keyword\">var</span> buffer = fs.readFileSync(<span class=\"hljs-string\">'./path/to/image.png'</span>);\nmapnik.Image.fromBytesSync(buffer, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, img</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// your custom code with `img` object   </span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "fromBytes"
          ]
        },
        {
          "description": "Create a new image from an SVG file",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "fromSVG"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "filename"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "scale the image. For example passing `0.5` as scale would render\nyour SVG at 50% the original size.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scale"
                }
              ]
            },
            {
              "title": "param",
              "description": "scale the image. For example passing `0.5` as scale would render\nyour SVG at 50% the original size.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.scale"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "mapnik.Image.fromSVG('./path/to/image.svg', {scale: 0.5}, function(err, img) {\n  if (err) throw err;\n  // new img object (at 50% scale)  \n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2717,
                "column": 1
              },
              "end": {
                "line": 2733,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L2717-L2733"
          },
          "name": "fromSVG",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "filename"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "scale the image. For example passing `0.5` as scale would render\nyour SVG at 50% the original size.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scale"
                }
              ]
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "scope": "static",
          "memberof": "mapnik.Image",
          "examples": [
            "mapnik.Image.fromSVG(<span class=\"hljs-string\">'./path/to/image.svg'</span>, {scale: <span class=\"hljs-number\">0.5</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, img</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// new img object (at 50% scale)  </span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "fromSVG"
          ]
        },
        {
          "description": "Load image from an SVG buffer",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "fromSVGBytes"
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "param",
              "description": "path to SVG image",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "path"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "scale the image. For example passing `0.5` as scale would render\nyour SVG at 50% the original size.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scale"
                }
              ]
            },
            {
              "title": "param",
              "description": "scale the image. For example passing `0.5` as scale would render\nyour SVG at 50% the original size.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.scale"
            },
            {
              "title": "param",
              "description": "= `function(err, img)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "var buffer = fs.readFileSync('./path/to/image.svg');\nmapnik.Image.fromSVGBytesSync(buffer, function(err, img) {\n  if (err) throw err;\n  // your custom code with `img`\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2894,
                "column": 1
              },
              "end": {
                "line": 2910,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L2894-L2910"
          },
          "name": "fromSVGBytes",
          "memberof": "mapnik.Image",
          "scope": "static",
          "params": [
            {
              "title": "param",
              "description": "path to SVG image",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "path"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "scale the image. For example passing `0.5` as scale would render\nyour SVG at 50% the original size.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scale"
                }
              ]
            },
            {
              "title": "param",
              "description": "= `function(err, img)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> buffer = fs.readFileSync(<span class=\"hljs-string\">'./path/to/image.svg'</span>);\nmapnik.Image.fromSVGBytesSync(buffer, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, img</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// your custom code with `img`</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "fromSVGBytes"
          ]
        },
        {
          "description": "Load image from an SVG buffer (synchronous)",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "fromSVGBytesSync"
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "param",
              "description": "path to SVG image",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "path"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "scale the image. For example passing `0.5` as scale would render\nyour SVG at 50% the original size.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scale"
                }
              ]
            },
            {
              "title": "param",
              "description": "scale the image. For example passing `0.5` as scale would render\nyour SVG at 50% the original size.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.scale"
            },
            {
              "title": "returns",
              "description": "Image object",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            },
            {
              "title": "example",
              "description": "var buffer = fs.readFileSync('./path/to/image.svg');\nvar img = mapnik.Image.fromSVGBytesSync(buffer);"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2509,
                "column": 1
              },
              "end": {
                "line": 2522,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L2509-L2522"
          },
          "name": "fromSVGBytesSync",
          "memberof": "mapnik.Image",
          "scope": "static",
          "params": [
            {
              "title": "param",
              "description": "path to SVG image",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "path"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "scale the image. For example passing `0.5` as scale would render\nyour SVG at 50% the original size.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scale"
                }
              ]
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "Image object",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> buffer = fs.readFileSync(<span class=\"hljs-string\">'./path/to/image.svg'</span>);\n<span class=\"hljs-keyword\">var</span> img = mapnik.Image.fromSVGBytesSync(buffer);"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "fromSVGBytesSync"
          ]
        },
        {
          "description": "Create a new image from an SVG file (synchronous)",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "fromSVGSync"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "filename"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "scale the image. For example passing `0.5` as scale would render\nyour SVG at 50% the original size.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scale"
                }
              ]
            },
            {
              "title": "param",
              "description": "scale the image. For example passing `0.5` as scale would render\nyour SVG at 50% the original size.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.scale"
            },
            {
              "title": "returns",
              "description": "image object",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "example",
              "description": "var img = mapnik.Image.fromSVG('./path/to/image.svg');"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2528,
                "column": 1
              },
              "end": {
                "line": 2541,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L2528-L2541"
          },
          "name": "fromSVGSync",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "filename"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "scale the image. For example passing `0.5` as scale would render\nyour SVG at 50% the original size.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scale"
                }
              ]
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "image object",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              }
            }
          ],
          "scope": "static",
          "memberof": "mapnik.Image",
          "examples": [
            "<span class=\"hljs-keyword\">var</span> img = mapnik.Image.fromSVG(<span class=\"hljs-string\">'./path/to/image.svg'</span>);"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "fromSVGSync"
          ]
        },
        {
          "description": "Load in a pre-existing image as an image object",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "open"
            },
            {
              "title": "memberof",
              "description": "mapnik.Image"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "param",
              "description": "path to the image you want to load",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "path"
            },
            {
              "title": "param",
              "description": "-",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "mapnik.Image.open('./path/to/image.jpg', function(err, img) {\n  if (err) throw err;\n  // img is now an Image object   \n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2400,
                "column": 1
              },
              "end": {
                "line": 2412,
                "column": 3
              }
            },
            "file": "src/mapnik_image.cpp",
            "path": "src/mapnik_image.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image.cpp#L2400-L2412"
          },
          "name": "open",
          "memberof": "mapnik.Image",
          "scope": "static",
          "params": [
            {
              "title": "param",
              "description": "path to the image you want to load",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "path"
            },
            {
              "title": "param",
              "description": "-",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "mapnik.Image.open(<span class=\"hljs-string\">'./path/to/image.jpg'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, img</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// img is now an Image object   </span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Image",
            "open"
          ]
        }
      ]
    },
    "events": [],
    "path": [
      "mapnik.Image"
    ]
  },
  {
    "description": "This is usually not initialized directly: you'll use the `mapnik.Image#view`\nmethod to instantiate an instance.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.ImageView"
      },
      {
        "title": "class",
        "description": null,
        "type": null,
        "name": null
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "left"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "top"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "width"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "height"
      },
      {
        "title": "throws",
        "description": "if any argument is missing or not numeric",
        "type": {
          "type": "NameExpression",
          "name": "TypeError"
        }
      },
      {
        "title": "example",
        "description": "var im = new mapnik.Image(256, 256);\nvar view = im.view(0, 0, 256, 256);"
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 19,
          "column": 1
        },
        "end": {
          "line": 33,
          "column": 3
        }
      },
      "file": "src/mapnik_image_view.cpp",
      "path": "src/mapnik_image_view.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_image_view.cpp#L19-L33"
    },
    "name": "mapnik.ImageView",
    "params": [
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "left"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "top"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "width"
      },
      {
        "title": "param",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "height"
      }
    ],
    "throws": [
      {
        "title": "throws",
        "description": "if any argument is missing or not numeric",
        "type": {
          "type": "NameExpression",
          "name": "TypeError"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> im = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">256</span>);\n<span class=\"hljs-keyword\">var</span> view = im.view(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">256</span>);"
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "mapnik.ImageView"
    ]
  },
  {
    "description": "No constructor - Severity level is only available via mapnik.Logger static instance.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.Logger"
      },
      {
        "title": "example",
        "description": "mapnik.Logger.setSeverity(mapnik.Logger.NONE);\nvar log = mapnik.Logger.get_severity();\nconsole.log(log); // 3"
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 7,
          "column": 1
        },
        "end": {
          "line": 15,
          "column": 3
        }
      },
      "file": "src/mapnik_logger.cpp",
      "path": "src/mapnik_logger.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_logger.cpp#L7-L15"
    },
    "name": "mapnik.Logger",
    "examples": [
      "mapnik.Logger.setSeverity(mapnik.Logger.NONE);\n<span class=\"hljs-keyword\">var</span> log = mapnik.Logger.get_severity();\n<span class=\"hljs-built_in\">console</span>.log(log); <span class=\"hljs-comment\">// 3</span>"
    ],
    "members": {
      "instance": [],
      "static": [
        {
          "description": "Returns integer which represents severity level",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "get_severity"
            },
            {
              "title": "memberof",
              "description": "mapnik.Logger"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "returns",
              "description": "severity level",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 51,
                "column": 1
              },
              "end": {
                "line": 57,
                "column": 3
              }
            },
            "file": "src/mapnik_logger.cpp",
            "path": "src/mapnik_logger.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_logger.cpp#L51-L57"
          },
          "name": "get_severity",
          "memberof": "mapnik.Logger",
          "scope": "static",
          "returns": [
            {
              "title": "returns",
              "description": "severity level",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Logger",
            "get_severity"
          ]
        },
        {
          "description": "Accepts level of severity as a mapnik constant\n\nAvailable security levels\n```\nmapnik.Logger.DEBUG -> 0\nmapnik.Logger.WARN -> 1\nmapnik.Logger.ERROR (default) -> 2\nmapnik.Logger.NONE -> 3\n```",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "set_severity"
            },
            {
              "title": "memberof",
              "description": "mapnik.Logger"
            },
            {
              "title": "static",
              "description": null
            },
            {
              "title": "param",
              "description": "severity level",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "severity"
            },
            {
              "title": "returns",
              "description": "severity level",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 63,
                "column": 1
              },
              "end": {
                "line": 78,
                "column": 3
              }
            },
            "file": "src/mapnik_logger.cpp",
            "path": "src/mapnik_logger.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_logger.cpp#L63-L78"
          },
          "name": "set_severity",
          "memberof": "mapnik.Logger",
          "scope": "static",
          "params": [
            {
              "title": "param",
              "description": "severity level",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "severity"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "severity level",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Logger",
            "set_severity"
          ]
        }
      ]
    },
    "events": [],
    "path": [
      "mapnik.Logger"
    ]
  },
  {
    "description": "A map in mapnik is an object that combines data sources and styles in\na way that lets you produce styled cartographic output.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.Map"
      },
      {
        "title": "class",
        "description": null,
        "type": null,
        "name": null
      },
      {
        "title": "param",
        "description": "in pixels",
        "type": {
          "type": "NameExpression",
          "name": "int"
        },
        "name": "width"
      },
      {
        "title": "param",
        "description": "in pixels",
        "type": {
          "type": "NameExpression",
          "name": "int"
        },
        "name": "height"
      },
      {
        "title": "param",
        "description": "projection as a proj4 code\ntypically used with '+init=epsg:3857'",
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "projection",
        "default": "'+proj"
      },
      {
        "title": "property",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "src"
      },
      {
        "title": "property",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "width"
      },
      {
        "title": "property",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "height"
      },
      {
        "title": "property",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "bufferSize"
      },
      {
        "title": "property",
        "description": "extent of the map as an array `[ minx, miny, maxx, maxy ]`",
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "number"
            }
          ]
        },
        "name": "extent"
      },
      {
        "title": "property",
        "description": "extent of the map's buffer `[ minx, miny, maxx, maxy ]`",
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "number"
            }
          ]
        },
        "name": "bufferedExtent"
      },
      {
        "title": "property",
        "description": "combination of extent and bufferedExtent `[ minx, miny, maxx, maxy ]`",
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "number"
            }
          ]
        },
        "name": "maximumExtent"
      },
      {
        "title": "property",
        "description": "background color as a {@link mapnik.Color} object",
        "type": {
          "type": "NameExpression",
          "name": "mapnik.Color"
        },
        "name": "background"
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 52,
          "column": 1
        },
        "end": {
          "line": 91,
          "column": 3
        }
      },
      "file": "src/mapnik_map.cpp",
      "path": "src/mapnik_map.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L52-L91"
    },
    "name": "mapnik.Map",
    "params": [
      {
        "title": "param",
        "description": "in pixels",
        "type": {
          "type": "NameExpression",
          "name": "int"
        },
        "name": "width"
      },
      {
        "title": "param",
        "description": "in pixels",
        "type": {
          "type": "NameExpression",
          "name": "int"
        },
        "name": "height"
      },
      {
        "title": "param",
        "description": "projection as a proj4 code\ntypically used with '+init=epsg:3857'",
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "projection",
        "default": "'+proj"
      }
    ],
    "properties": [
      {
        "title": "property",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "src"
      },
      {
        "title": "property",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "width"
      },
      {
        "title": "property",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "height"
      },
      {
        "title": "property",
        "description": null,
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "bufferSize"
      },
      {
        "title": "property",
        "description": "extent of the map as an array `[ minx, miny, maxx, maxy ]`",
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "number"
            }
          ]
        },
        "name": "extent"
      },
      {
        "title": "property",
        "description": "extent of the map's buffer `[ minx, miny, maxx, maxy ]`",
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "number"
            }
          ]
        },
        "name": "bufferedExtent"
      },
      {
        "title": "property",
        "description": "combination of extent and bufferedExtent `[ minx, miny, maxx, maxy ]`",
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "number"
            }
          ]
        },
        "name": "maximumExtent"
      },
      {
        "title": "property",
        "description": "background color as a {@link mapnik.Color} object",
        "type": {
          "type": "NameExpression",
          "name": "mapnik.Color"
        },
        "name": "background"
      }
    ],
    "members": {
      "instance": [
        {
          "description": "Add a new layer to this map",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "add_layer"
            },
            {
              "title": "param",
              "description": "layer",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Layer"
              },
              "name": "new"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 854,
                "column": 1
              },
              "end": {
                "line": 861,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L854-L861"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "add_layer",
          "params": [
            {
              "title": "param",
              "description": "layer",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Layer"
              },
              "name": "new"
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "add_layer"
          ]
        },
        {
          "description": "Remove all layers and styles from this map",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "clear"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 943,
                "column": 1
              },
              "end": {
                "line": 949,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L943-L949"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "clear",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "clear"
          ]
        },
        {
          "description": "Clone this map object, returning a value which can be changed\nwithout mutating the original",
          "tags": [
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "clone"
            },
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "returns",
              "description": "clone",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Map"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1384,
                "column": 1
              },
              "end": {
                "line": 1392,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L1384-L1392"
          },
          "scope": "instance",
          "name": "clone",
          "memberof": "mapnik.Map",
          "returns": [
            {
              "title": "returns",
              "description": "clone",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Map"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "clone"
          ]
        },
        {
          "description": "Get all of the fonts currently registered as part of this map",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "font"
            },
            {
              "title": "returns",
              "description": "fonts",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 501,
                "column": 1
              },
              "end": {
                "line": 507,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L501-L507"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "font",
          "returns": [
            {
              "title": "returns",
              "description": "fonts",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "font"
          ]
        },
        {
          "description": "Get the currently-registered font directory, if any",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "fontDirectory"
            },
            {
              "title": "returns",
              "description": "fonts",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 541,
                "column": 1
              },
              "end": {
                "line": 547,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L541-L547"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "fontDirectory",
          "returns": [
            {
              "title": "returns",
              "description": "fonts",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "fontDirectory"
          ]
        },
        {
          "description": "Get all of the fonts currently registered as part of this map, as a mapping\nfrom font to font file",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "fontFiles"
            },
            {
              "title": "returns",
              "description": "fonts",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 521,
                "column": 1
              },
              "end": {
                "line": 528,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L521-L528"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "fontFiles",
          "returns": [
            {
              "title": "returns",
              "description": "fonts",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "fontFiles"
          ]
        },
        {
          "description": "Load styles, layers, and other information for this map from a Mapnik\nXML stylesheet given as a string.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "fromStringSync"
            },
            {
              "title": "param",
              "description": "contents",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "stylesheet"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}"
            },
            {
              "title": "example",
              "description": "var fs = require('fs');\nmap.fromStringSync(fs.readFileSync('./style.xml', 'utf8'));"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1185,
                "column": 1
              },
              "end": {
                "line": 1197,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L1185-L1197"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "fromStringSync",
          "params": [
            {
              "title": "param",
              "description": "contents",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "stylesheet"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\nmap.fromStringSync(fs.readFileSync(<span class=\"hljs-string\">'./style.xml'</span>, <span class=\"hljs-string\">'utf8'</span>));"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "fromStringSync"
          ]
        },
        {
          "description": "Load styles, layers, and other information for this map from a Mapnik\nXML stylesheet given as a string.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "fromStringSync"
            },
            {
              "title": "param",
              "description": "contents",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "stylesheet"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "var fs = require('fs');\nmap.fromStringSync(fs.readFileSync('./style.xml', 'utf8'), function(err, res) {\n  // details loaded\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1263,
                "column": 1
              },
              "end": {
                "line": 1278,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L1263-L1278"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "fromStringSync",
          "params": [
            {
              "title": "param",
              "description": "contents",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "stylesheet"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\nmap.fromStringSync(fs.readFileSync(<span class=\"hljs-string\">'./style.xml'</span>, <span class=\"hljs-string\">'utf8'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, res</span>) </span>{\n  <span class=\"hljs-comment\">// details loaded</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "fromStringSync"
          ]
        },
        {
          "description": "Get a layer out of this map, given a name or index",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "get_layer"
            },
            {
              "title": "param",
              "description": "name or index",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "layer"
            },
            {
              "title": "returns",
              "description": "the layer",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Layer"
              }
            },
            {
              "title": "throws",
              "description": "if index is incorrect or layer is not found",
              "type": {
                "type": "NameExpression",
                "name": "Error"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 879,
                "column": 1
              },
              "end": {
                "line": 888,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L879-L888"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "get_layer",
          "params": [
            {
              "title": "param",
              "description": "name or index",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "layer"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "the layer",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Layer"
              }
            }
          ],
          "throws": [
            {
              "title": "throws",
              "description": "if index is incorrect or layer is not found",
              "type": {
                "type": "NameExpression",
                "name": "Error"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "get_layer"
          ]
        },
        {
          "description": "Get all of the currently-added layers in this map",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "layers"
            },
            {
              "title": "returns",
              "description": "layers",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.Layer"
                  }
                ]
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 834,
                "column": 1
              },
              "end": {
                "line": 841,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L834-L841"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "layers",
          "returns": [
            {
              "title": "returns",
              "description": "layers",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.Layer"
                  }
                ]
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "layers"
          ]
        },
        {
          "description": "Load styles, layers, and other information for this map from a Mapnik\nXML stylesheet.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "load"
            },
            {
              "title": "param",
              "description": "path",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "stylesheet"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 996,
                "column": 1
              },
              "end": {
                "line": 1006,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L996-L1006"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "load",
          "params": [
            {
              "title": "param",
              "description": "path",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "stylesheet"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "load"
          ]
        },
        {
          "description": "Load fonts from local or external source",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "loadFonts"
            },
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 440,
                "column": 1
              },
              "end": {
                "line": 447,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L440-L447"
          },
          "name": "loadFonts",
          "memberof": "mapnik.Map",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "loadFonts"
          ]
        },
        {
          "description": "Load styles, layers, and other information for this map from a Mapnik\nXML stylesheet.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "loadSync"
            },
            {
              "title": "param",
              "description": "path",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "stylesheet"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}"
            },
            {
              "title": "example",
              "description": "map.loadSync('./style.xml');"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1107,
                "column": 1
              },
              "end": {
                "line": 1118,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L1107-L1118"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "loadSync",
          "params": [
            {
              "title": "param",
              "description": "path",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "stylesheet"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "default": "{}"
            }
          ],
          "examples": [
            "map.loadSync(<span class=\"hljs-string\">'./style.xml'</span>);"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "loadSync"
          ]
        },
        {
          "description": "Give this map new dimensions",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "resize"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 957,
                "column": 1
              },
              "end": {
                "line": 965,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L957-L965"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "resize",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "resize"
          ]
        },
        {
          "description": "Get the map's scale factor. This is the ratio between pixels and geographical\nunits like meters.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "scale"
            },
            {
              "title": "returns",
              "description": "scale",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 559,
                "column": 1
              },
              "end": {
                "line": 566,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L559-L566"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "scale",
          "returns": [
            {
              "title": "returns",
              "description": "scale",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "scale"
          ]
        },
        {
          "description": "Get the map's scale denominator.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.Map"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "name",
              "description": null,
              "name": "scaleDenominator"
            },
            {
              "title": "returns",
              "description": "scale denominator",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 573,
                "column": 1
              },
              "end": {
                "line": 580,
                "column": 3
              }
            },
            "file": "src/mapnik_map.cpp",
            "path": "src/mapnik_map.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_map.cpp#L573-L580"
          },
          "memberof": "mapnik.Map",
          "scope": "instance",
          "name": "scaleDenominator",
          "returns": [
            {
              "title": "returns",
              "description": "scale denominator",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Map",
            "scaleDenominator"
          ]
        }
      ],
      "static": []
    },
    "events": [],
    "path": [
      "mapnik.Map"
    ]
  },
  {
    "description": "A geographical projection: this class makes it possible to translate between\nlocations in different projections",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.Projection"
      },
      {
        "title": "class",
        "description": null,
        "type": null,
        "name": null
      },
      {
        "title": "param",
        "description": "projection as a proj4 definition string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "projection"
      },
      {
        "title": "param",
        "description": "whether to lazily instantiate the\ndata backing this projection.",
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Object"
          }
        },
        "name": "options",
        "default": "{lazy:false}"
      },
      {
        "title": "throws",
        "description": "if the projection string or options argument is the wrong type",
        "type": {
          "type": "NameExpression",
          "name": "TypeError"
        }
      },
      {
        "title": "throws",
        "description": "the projection could not be initialized - it was not found\nin proj4's tables or the string was malformed",
        "type": {
          "type": "NameExpression",
          "name": "Error"
        }
      },
      {
        "title": "example",
        "description": "var wgs84 = new mapnik.Projection('+init=epsg:4326');"
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 11,
          "column": 1
        },
        "end": {
          "line": 25,
          "column": 3
        }
      },
      "file": "src/mapnik_projection.cpp",
      "path": "src/mapnik_projection.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_projection.cpp#L11-L25"
    },
    "name": "mapnik.Projection",
    "params": [
      {
        "title": "param",
        "description": "projection as a proj4 definition string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "projection"
      },
      {
        "title": "param",
        "description": "whether to lazily instantiate the\ndata backing this projection.",
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Object"
          }
        },
        "name": "options",
        "default": "{lazy:false}"
      }
    ],
    "throws": [
      {
        "title": "throws",
        "description": "if the projection string or options argument is the wrong type",
        "type": {
          "type": "NameExpression",
          "name": "TypeError"
        }
      },
      {
        "title": "throws",
        "description": "the projection could not be initialized - it was not found\nin proj4's tables or the string was malformed",
        "type": {
          "type": "NameExpression",
          "name": "Error"
        }
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> wgs84 = <span class=\"hljs-keyword\">new</span> mapnik.Projection(<span class=\"hljs-string\">'+init=epsg:4326'</span>);"
    ],
    "members": {
      "instance": [
        {
          "description": "Project from a position in WGS84 space to a position in this projection.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "forward"
            },
            {
              "title": "memberof",
              "description": "mapnik.Projection"
            },
            {
              "title": "instance",
              "description": null
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 96,
                "column": 1
              },
              "end": {
                "line": 108,
                "column": 3
              }
            },
            "file": "src/mapnik_projection.cpp",
            "path": "src/mapnik_projection.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_projection.cpp#L96-L108"
          },
          "name": "forward",
          "memberof": "mapnik.Projection",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Projection",
            "forward"
          ]
        },
        {
          "description": "Unproject from a position in this projection to the same position in WGS84\nspace.",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "inverse"
            },
            {
              "title": "memberof",
              "description": "mapnik.Projection"
            },
            {
              "title": "instance",
              "description": null
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 165,
                "column": 1
              },
              "end": {
                "line": 174,
                "column": 3
              }
            },
            "file": "src/mapnik_projection.cpp",
            "path": "src/mapnik_projection.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_projection.cpp#L165-L174"
          },
          "name": "inverse",
          "memberof": "mapnik.Projection",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.Projection",
            "inverse"
          ]
        }
      ],
      "static": []
    },
    "events": [],
    "path": [
      "mapnik.Projection"
    ]
  },
  {
    "description": "A tile generator built according to the [Mapbox Vector Tile](https://github.com/mapbox/vector-tile-spec)\nspecification for compressed and simplified tiled vector data. \nLearn more about vector tiles [here](https://www.mapbox.com/developers/vector-tiles/).",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.VectorTile"
      },
      {
        "title": "class",
        "description": null,
        "type": null,
        "name": null
      },
      {
        "title": "param",
        "description": "an integer zoom level",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "z"
      },
      {
        "title": "param",
        "description": "an integer x coordinate",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "an integer y coordinate",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "y"
      },
      {
        "title": "property",
        "description": "horizontal axis position",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "x"
      },
      {
        "title": "property",
        "description": "vertical axis position",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "y"
      },
      {
        "title": "property",
        "description": "the zoom level",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "z"
      },
      {
        "title": "property",
        "description": "the size of the tile",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "tileSize"
      },
      {
        "title": "property",
        "description": "the size of the tile's buffer",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "bufferSize"
      },
      {
        "title": "example",
        "description": "var vt = new mapnik.VectorTile(9,112,195);\nconsole.log(vt.x, vt.y, vt.z); // 9, 112, 195\nconsole.log(vt.tileSize, vt.bufferSize); // 4096, 128"
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 247,
          "column": 1
        },
        "end": {
          "line": 266,
          "column": 3
        }
      },
      "file": "src/mapnik_vector_tile.cpp",
      "path": "src/mapnik_vector_tile.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L247-L266"
    },
    "name": "mapnik.VectorTile",
    "params": [
      {
        "title": "param",
        "description": "an integer zoom level",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "z"
      },
      {
        "title": "param",
        "description": "an integer x coordinate",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "x"
      },
      {
        "title": "param",
        "description": "an integer y coordinate",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "y"
      }
    ],
    "properties": [
      {
        "title": "property",
        "description": "horizontal axis position",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "x"
      },
      {
        "title": "property",
        "description": "vertical axis position",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "y"
      },
      {
        "title": "property",
        "description": "the zoom level",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "z"
      },
      {
        "title": "property",
        "description": "the size of the tile",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "tileSize"
      },
      {
        "title": "property",
        "description": "the size of the tile's buffer",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "name": "bufferSize"
      }
    ],
    "examples": [
      "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">112</span>,<span class=\"hljs-number\">195</span>);\n<span class=\"hljs-built_in\">console</span>.log(vt.x, vt.y, vt.z); <span class=\"hljs-comment\">// 9, 112, 195</span>\n<span class=\"hljs-built_in\">console</span>.log(vt.tileSize, vt.bufferSize); <span class=\"hljs-comment\">// 4096, 128</span>"
    ],
    "members": {
      "instance": [
        {
          "description": "Add new vector tile data to an existing vector tile",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "addData"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "raw vector data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "var data_buffer = fs.readFileSync('./path/to/data.mvt'); // returns a buffer\nvar vt = new mapnik.VectorTile(9,112,195);\nvt.addData(data_buffer, function(err) {\n  if (err) throw err;\n  // your custom code\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3798,
                "column": 1
              },
              "end": {
                "line": 3813,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L3798-L3813"
          },
          "memberof": "mapnik.VectorTile",
          "name": "addData",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "raw vector data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> data_buffer = fs.readFileSync(<span class=\"hljs-string\">'./path/to/data.mvt'</span>); <span class=\"hljs-comment\">// returns a buffer</span>\n<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">112</span>,<span class=\"hljs-number\">195</span>);\nvt.addData(data_buffer, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// your custom code</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "addData"
          ]
        },
        {
          "description": "Add raw data to this tile as a Buffer",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "addDataSync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "raw data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "example",
              "description": "var data_buffer = fs.readFileSync('./path/to/data.mvt'); // returns a buffer\n// assumes you have created a vector tile object already\nvt.addDataSync(data_buffer);\n// your custom code"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3734,
                "column": 1
              },
              "end": {
                "line": 3746,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L3734-L3746"
          },
          "memberof": "mapnik.VectorTile",
          "name": "addDataSync",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "raw data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> data_buffer = fs.readFileSync(<span class=\"hljs-string\">'./path/to/data.mvt'</span>); <span class=\"hljs-comment\">// returns a buffer</span>\n<span class=\"hljs-comment\">// assumes you have created a vector tile object already</span>\nvt.addDataSync(data_buffer);\n<span class=\"hljs-comment\">// your custom code</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "addDataSync"
          ]
        },
        {
          "description": "Add features to this tile from a GeoJSON string",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "addGeoJSON"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "as a string",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "geojson"
            },
            {
              "title": "param",
              "description": "of the layer to be added",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "used to discard small polygons. \nIf a value is greater than `0` it will trigger polygons with an area smaller \nthan the value to be discarded. Measured in grid integers, not spherical mercator\ncoordinates.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.area_threshold",
                  "default": "0.1"
                },
                {
                  "title": "param",
                  "description": "Simplification works to generalize \ngeometries before encoding into vector tiles.simplification distance The \n`simplify_distance` value works in integer space over a 4096 pixel grid and uses\nthe [Douglas-Peucker algorithm](https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm).",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.simplify_distance",
                  "default": "0.0"
                },
                {
                  "title": "param",
                  "description": "ensure all geometry is valid according to\nOGC Simple definition",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.strictly_simple",
                  "default": "true"
                },
                {
                  "title": "param",
                  "description": "union all multipolygons",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.multi_polygon_union",
                  "default": "false"
                },
                {
                  "title": "param",
                  "description": "the fill type used in determining what are holes and what are outer rings. See the \n[Clipper documentation](http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/PolyFillType.htm)\nto learn more about fill types.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "mapnik.polygonFillType"
                        }
                      ]
                    }
                  },
                  "name": "options.fill_type",
                  "default": "mapnik.polygonFillType.positive"
                },
                {
                  "title": "param",
                  "description": "if `true`, don't assume winding order and ring order of \npolygons are correct according to the [`2.0` Mapbox Vector Tile specification](https://github.com/mapbox/vector-tile-spec)",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.process_all_rings",
                  "default": "false"
                }
              ]
            },
            {
              "title": "param",
              "description": "used to discard small polygons. \nIf a value is greater than `0` it will trigger polygons with an area smaller \nthan the value to be discarded. Measured in grid integers, not spherical mercator\ncoordinates.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.area_threshold",
              "default": "0.1"
            },
            {
              "title": "param",
              "description": "Simplification works to generalize \ngeometries before encoding into vector tiles.simplification distance The \n`simplify_distance` value works in integer space over a 4096 pixel grid and uses\nthe [Douglas-Peucker algorithm](https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm).",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.simplify_distance",
              "default": "0.0"
            },
            {
              "title": "param",
              "description": "ensure all geometry is valid according to\nOGC Simple definition",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "bool"
                }
              },
              "name": "options.strictly_simple",
              "default": "true"
            },
            {
              "title": "param",
              "description": "union all multipolygons",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "bool"
                }
              },
              "name": "options.multi_polygon_union",
              "default": "false"
            },
            {
              "title": "param",
              "description": "the fill type used in determining what are holes and what are outer rings. See the \n[Clipper documentation](http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/PolyFillType.htm)\nto learn more about fill types.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "TypeApplication",
                  "expression": {
                    "type": "NameExpression",
                    "name": "Object"
                  },
                  "applications": [
                    {
                      "type": "NameExpression",
                      "name": "mapnik.polygonFillType"
                    }
                  ]
                }
              },
              "name": "options.fill_type",
              "default": "mapnik.polygonFillType.positive"
            },
            {
              "title": "param",
              "description": "if `true`, don't assume winding order and ring order of \npolygons are correct according to the [`2.0` Mapbox Vector Tile specification](https://github.com/mapbox/vector-tile-spec)",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "bool"
                }
              },
              "name": "options.process_all_rings",
              "default": "false"
            },
            {
              "title": "example",
              "description": "var geojson = { ... };\nvar vt = mapnik.VectorTile(0,0,0);\nvt.addGeoJSON(JSON.stringify(geojson), 'layer-name', {});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3058,
                "column": 1
              },
              "end": {
                "line": 3088,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L3058-L3088"
          },
          "memberof": "mapnik.VectorTile",
          "name": "addGeoJSON",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "as a string",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "geojson"
            },
            {
              "title": "param",
              "description": "of the layer to be added",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "used to discard small polygons. \nIf a value is greater than `0` it will trigger polygons with an area smaller \nthan the value to be discarded. Measured in grid integers, not spherical mercator\ncoordinates.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.area_threshold",
                  "default": "0.1"
                },
                {
                  "title": "param",
                  "description": "Simplification works to generalize \ngeometries before encoding into vector tiles.simplification distance The \n`simplify_distance` value works in integer space over a 4096 pixel grid and uses\nthe [Douglas-Peucker algorithm](https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm).",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.simplify_distance",
                  "default": "0.0"
                },
                {
                  "title": "param",
                  "description": "ensure all geometry is valid according to\nOGC Simple definition",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.strictly_simple",
                  "default": "true"
                },
                {
                  "title": "param",
                  "description": "union all multipolygons",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.multi_polygon_union",
                  "default": "false"
                },
                {
                  "title": "param",
                  "description": "the fill type used in determining what are holes and what are outer rings. See the \n[Clipper documentation](http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/PolyFillType.htm)\nto learn more about fill types.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "mapnik.polygonFillType"
                        }
                      ]
                    }
                  },
                  "name": "options.fill_type",
                  "default": "mapnik.polygonFillType.positive"
                },
                {
                  "title": "param",
                  "description": "if `true`, don't assume winding order and ring order of \npolygons are correct according to the [`2.0` Mapbox Vector Tile specification](https://github.com/mapbox/vector-tile-spec)",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.process_all_rings",
                  "default": "false"
                }
              ]
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> geojson = { ... };\n<span class=\"hljs-keyword\">var</span> vt = mapnik.VectorTile(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\nvt.addGeoJSON(<span class=\"hljs-built_in\">JSON</span>.stringify(geojson), <span class=\"hljs-string\">'layer-name'</span>, {});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "addGeoJSON"
          ]
        },
        {
          "description": "Add a <mapnik.Image> as a tile layer (asynchronous)",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "addImage"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              },
              "name": "image"
            },
            {
              "title": "param",
              "description": "of the layer to be added",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "can be any \nof the <mapnik.imageScaling> methods",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.image_scaling",
                  "default": "bilinear"
                },
                {
                  "title": "param",
                  "description": "other options include `jpeg`, `png`, `tiff`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.image_format",
                  "default": "webp"
                }
              ]
            },
            {
              "title": "param",
              "description": "can be any \nof the <mapnik.imageScaling> methods",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.image_scaling",
              "default": "bilinear"
            },
            {
              "title": "param",
              "description": "other options include `jpeg`, `png`, `tiff`",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.image_format",
              "default": "webp"
            },
            {
              "title": "example",
              "description": "var vt = new mapnik.VectorTile(1, 0, 0, {\n  tile_size:256\n});\nvar im = new mapnik.Image(256, 256);\nvt.addImage(im, 'layer-name', {\n  image_format: 'jpeg',\n  image_scaling: 'gaussian'\n}, function(err) {\n  if (err) throw err;\n  // your custom code using `vt`  \n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3371,
                "column": 1
              },
              "end": {
                "line": 3395,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L3371-L3395"
          },
          "memberof": "mapnik.VectorTile",
          "name": "addImage",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              },
              "name": "image"
            },
            {
              "title": "param",
              "description": "of the layer to be added",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "can be any \nof the <mapnik.imageScaling> methods",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.image_scaling",
                  "default": "bilinear"
                },
                {
                  "title": "param",
                  "description": "other options include `jpeg`, `png`, `tiff`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.image_format",
                  "default": "webp"
                }
              ]
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {\n  tile_size:<span class=\"hljs-number\">256</span>\n});\n<span class=\"hljs-keyword\">var</span> im = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">256</span>);\nvt.addImage(im, <span class=\"hljs-string\">'layer-name'</span>, {\n  image_format: <span class=\"hljs-string\">'jpeg'</span>,\n  image_scaling: <span class=\"hljs-string\">'gaussian'</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// your custom code using `vt`  </span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "addImage"
          ]
        },
        {
          "description": "Add an encoded image buffer as a layer",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "addImageBuffer"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "raw image data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "param",
              "description": "name of the layer to be added",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "var vt = new mapnik.VectorTile(1, 0, 0, {\n  tile_size: 256\n});\nvar image_buffer = fs.readFileSync('./path/to/image.jpg'); // returns a buffer\nvt.addImageBufferSync(image_buffer, 'layer-name', function(err) {\n  if (err) throw err;\n  // your custom code\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3625,
                "column": 1
              },
              "end": {
                "line": 3643,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L3625-L3643"
          },
          "memberof": "mapnik.VectorTile",
          "name": "addImageBuffer",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "raw image data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "param",
              "description": "name of the layer to be added",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {\n  tile_size: <span class=\"hljs-number\">256</span>\n});\n<span class=\"hljs-keyword\">var</span> image_buffer = fs.readFileSync(<span class=\"hljs-string\">'./path/to/image.jpg'</span>); <span class=\"hljs-comment\">// returns a buffer</span>\nvt.addImageBufferSync(image_buffer, <span class=\"hljs-string\">'layer-name'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// your custom code</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "addImageBuffer"
          ]
        },
        {
          "description": "Add raw image buffer as a new tile layer (synchronous)",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "addImageBufferSync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "raw data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "param",
              "description": "name of the layer to be added",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "example",
              "description": "var vt = new mapnik.VectorTile(1, 0, 0, {\n  tile_size: 256\n});\nvar image_buffer = fs.readFileSync('./path/to/image.jpg');\nvt.addImageBufferSync(image_buffer, 'layer-name');"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3548,
                "column": 1
              },
              "end": {
                "line": 3562,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L3548-L3562"
          },
          "memberof": "mapnik.VectorTile",
          "name": "addImageBufferSync",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "raw data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "param",
              "description": "name of the layer to be added",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {\n  tile_size: <span class=\"hljs-number\">256</span>\n});\n<span class=\"hljs-keyword\">var</span> image_buffer = fs.readFileSync(<span class=\"hljs-string\">'./path/to/image.jpg'</span>);\nvt.addImageBufferSync(image_buffer, <span class=\"hljs-string\">'layer-name'</span>);"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "addImageBufferSync"
          ]
        },
        {
          "description": "Add a {@link mapnik.Image} as a tile layer (synchronous)",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "addImageSync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              },
              "name": "image"
            },
            {
              "title": "param",
              "description": "of the layer to be added",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "can be any \nof the <mapnik.imageScaling> methods",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.image_scaling",
                  "default": "bilinear"
                },
                {
                  "title": "param",
                  "description": "or `jpeg`, `png`, `tiff`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.image_format",
                  "default": "webp"
                }
              ]
            },
            {
              "title": "param",
              "description": "can be any \nof the <mapnik.imageScaling> methods",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.image_scaling",
              "default": "bilinear"
            },
            {
              "title": "param",
              "description": "or `jpeg`, `png`, `tiff`",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.image_format",
              "default": "webp"
            },
            {
              "title": "example",
              "description": "var vt = new mapnik.VectorTile(1, 0, 0, {\n  tile_size:256\n});\nvar im = new mapnik.Image(256, 256);\nvt.addImageSync(im, 'layer-name', {\n  image_format: 'jpeg',\n  image_scaling: 'gaussian'\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3228,
                "column": 1
              },
              "end": {
                "line": 3249,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L3228-L3249"
          },
          "memberof": "mapnik.VectorTile",
          "name": "addImageSync",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              },
              "name": "image"
            },
            {
              "title": "param",
              "description": "of the layer to be added",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "can be any \nof the <mapnik.imageScaling> methods",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.image_scaling",
                  "default": "bilinear"
                },
                {
                  "title": "param",
                  "description": "or `jpeg`, `png`, `tiff`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.image_format",
                  "default": "webp"
                }
              ]
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, {\n  tile_size:<span class=\"hljs-number\">256</span>\n});\n<span class=\"hljs-keyword\">var</span> im = <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">256</span>);\nvt.addImageSync(im, <span class=\"hljs-string\">'layer-name'</span>, {\n  image_format: <span class=\"hljs-string\">'jpeg'</span>,\n  image_scaling: <span class=\"hljs-string\">'gaussian'</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "addImageSync"
          ]
        },
        {
          "description": "Get the extent including the buffer of this vector tile",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "bufferedExtent"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "extent - `[minx, miny, maxx, maxy]`",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            },
            {
              "title": "example",
              "description": "var vt = new mapnik.VectorTile(9,112,195);\nvar extent = vt.bufferedExtent();\nconsole.log(extent); // [-11273544.4277, 4693845.0329, -11190380.9409, 4777008.5197];"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1272,
                "column": 1
              },
              "end": {
                "line": 1283,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L1272-L1283"
          },
          "memberof": "mapnik.VectorTile",
          "name": "bufferedExtent",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "extent - `[minx, miny, maxx, maxy]`",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">112</span>,<span class=\"hljs-number\">195</span>);\n<span class=\"hljs-keyword\">var</span> extent = vt.bufferedExtent();\n<span class=\"hljs-built_in\">console</span>.log(extent); <span class=\"hljs-comment\">// [-11273544.4277, 4693845.0329, -11190380.9409, 4777008.5197];</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "bufferedExtent"
          ]
        },
        {
          "description": "Remove all data from this vector tile",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "clear"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "vt.clear(function(err) {\n  if (err) throw err;\n  console.log(vt.getData().length); // 0   \n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 5134,
                "column": 1
              },
              "end": {
                "line": 5146,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L5134-L5146"
          },
          "memberof": "mapnik.VectorTile",
          "name": "clear",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "vt.clear(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-built_in\">console</span>.log(vt.getData().length); <span class=\"hljs-comment\">// 0   </span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "clear"
          ]
        },
        {
          "description": "Remove all data from this vector tile (synchronously)",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "clearSync"
            },
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "example",
              "description": "vt.clearSync();\nconsole.log(vt.getData().length); // 0"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 5102,
                "column": 1
              },
              "end": {
                "line": 5110,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L5102-L5110"
          },
          "name": "clearSync",
          "memberof": "mapnik.VectorTile",
          "scope": "instance",
          "examples": [
            "vt.clearSync();\n<span class=\"hljs-built_in\">console</span>.log(vt.getData().length); <span class=\"hljs-comment\">// 0</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "clearSync"
          ]
        },
        {
          "description": "Composite an array of vector tiles into one vector tile",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "composite"
            },
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "an array of vector tile objects",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.VectorTile"
                  }
                ]
              },
              "name": "array"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "float"
                    }
                  },
                  "name": "options.scale_factor",
                  "default": "1.0"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset_x",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset_y",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "used to discard small polygons. \nIf a value is greater than `0` it will trigger polygons with an area smaller \nthan the value to be discarded. Measured in grid integers, not spherical mercator\ncoordinates.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "float"
                    }
                  },
                  "name": "options.area_threshold",
                  "default": "0.1"
                },
                {
                  "title": "param",
                  "description": "ensure all geometry is valid according to\nOGC Simple definition",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.strictly_simple",
                  "default": "true"
                },
                {
                  "title": "param",
                  "description": "union all multipolygons",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.multi_polygon_union",
                  "default": "false"
                },
                {
                  "title": "param",
                  "description": "the fill type used in determining what are holes and what are outer rings. See the \n[Clipper documentation](http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/PolyFillType.htm)\nto learn more about fill types.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "mapnik.polygonFillType"
                        }
                      ]
                    }
                  },
                  "name": "options.fill_type",
                  "default": "mapnik.polygonFillType.positive"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "float"
                    }
                  },
                  "name": "options.scale_denominator",
                  "default": "0.0"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.reencode",
                  "default": "false"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      ]
                    }
                  },
                  "name": "options.max_extent",
                  "default": "minx,miny,maxx,maxy"
                },
                {
                  "title": "param",
                  "description": "Simplification works to generalize \ngeometries before encoding into vector tiles.simplification distance The \n`simplify_distance` value works in integer space over a 4096 pixel grid and uses\nthe [Douglas-Peucker algorithm](https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm).",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "float"
                    }
                  },
                  "name": "options.simplify_distance",
                  "default": "0.0"
                },
                {
                  "title": "param",
                  "description": "if `true`, don't assume winding order and ring order of \npolygons are correct according to the [`2.0` Mapbox Vector Tile specification](https://github.com/mapbox/vector-tile-spec)",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.process_all_rings",
                  "default": "false"
                },
                {
                  "title": "param",
                  "description": "or `jpeg`, `png`, `tiff`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.image_format",
                  "default": "webp"
                },
                {
                  "title": "param",
                  "description": "can be any \nof the <mapnik.imageScaling> methods",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.scaling_method",
                  "default": "bilinear"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.threading_mode",
                  "default": "deferred"
                }
              ]
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "float"
                }
              },
              "name": "options.scale_factor",
              "default": "1.0"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.offset_x",
              "default": "0"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.offset_y",
              "default": "0"
            },
            {
              "title": "param",
              "description": "used to discard small polygons. \nIf a value is greater than `0` it will trigger polygons with an area smaller \nthan the value to be discarded. Measured in grid integers, not spherical mercator\ncoordinates.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "float"
                }
              },
              "name": "options.area_threshold",
              "default": "0.1"
            },
            {
              "title": "param",
              "description": "ensure all geometry is valid according to\nOGC Simple definition",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "bool"
                }
              },
              "name": "options.strictly_simple",
              "default": "true"
            },
            {
              "title": "param",
              "description": "union all multipolygons",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "bool"
                }
              },
              "name": "options.multi_polygon_union",
              "default": "false"
            },
            {
              "title": "param",
              "description": "the fill type used in determining what are holes and what are outer rings. See the \n[Clipper documentation](http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/PolyFillType.htm)\nto learn more about fill types.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "TypeApplication",
                  "expression": {
                    "type": "NameExpression",
                    "name": "Object"
                  },
                  "applications": [
                    {
                      "type": "NameExpression",
                      "name": "mapnik.polygonFillType"
                    }
                  ]
                }
              },
              "name": "options.fill_type",
              "default": "mapnik.polygonFillType.positive"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "float"
                }
              },
              "name": "options.scale_denominator",
              "default": "0.0"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "bool"
                }
              },
              "name": "options.reencode",
              "default": "false"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "TypeApplication",
                  "expression": {
                    "type": "NameExpression",
                    "name": "Array"
                  },
                  "applications": [
                    {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  ]
                }
              },
              "name": "options.max_extent",
              "default": "minx,miny,maxx,maxy"
            },
            {
              "title": "param",
              "description": "Simplification works to generalize \ngeometries before encoding into vector tiles.simplification distance The \n`simplify_distance` value works in integer space over a 4096 pixel grid and uses\nthe [Douglas-Peucker algorithm](https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm).",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "float"
                }
              },
              "name": "options.simplify_distance",
              "default": "0.0"
            },
            {
              "title": "param",
              "description": "if `true`, don't assume winding order and ring order of \npolygons are correct according to the [`2.0` Mapbox Vector Tile specification](https://github.com/mapbox/vector-tile-spec)",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "bool"
                }
              },
              "name": "options.process_all_rings",
              "default": "false"
            },
            {
              "title": "param",
              "description": "or `jpeg`, `png`, `tiff`",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.image_format",
              "default": "webp"
            },
            {
              "title": "param",
              "description": "can be any \nof the <mapnik.imageScaling> methods",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.scaling_method",
              "default": "bilinear"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.threading_mode",
              "default": "deferred"
            },
            {
              "title": "param",
              "description": "`function(err)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "var vt1 = new mapnik.VectorTile(0,0,0);\nvar vt2 = new mapnik.VectorTile(0,0,0);\nvar options = {\n  scale: 1.0,\n  offset_x: 0,\n  offset_y: 0,\n  area_threshold: 0.1,\n  strictly_simple: false,\n  multi_polygon_union: true,\n  fill_type: mapnik.polygonFillType.nonZero,\n  process_all_rings:false,\n  scale_denominator: 0.0,\n  reencode: true\n}\n// add vt2 to vt1 tile\nvt1.composite([vt2], options, function(err) {\n  if (err) throw err;\n  // your custom code with `vt1`\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 830,
                "column": 1
              },
              "end": {
                "line": 887,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L830-L887"
          },
          "name": "composite",
          "memberof": "mapnik.VectorTile",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "an array of vector tile objects",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.VectorTile"
                  }
                ]
              },
              "name": "array"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "float"
                    }
                  },
                  "name": "options.scale_factor",
                  "default": "1.0"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset_x",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.offset_y",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "used to discard small polygons. \nIf a value is greater than `0` it will trigger polygons with an area smaller \nthan the value to be discarded. Measured in grid integers, not spherical mercator\ncoordinates.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "float"
                    }
                  },
                  "name": "options.area_threshold",
                  "default": "0.1"
                },
                {
                  "title": "param",
                  "description": "ensure all geometry is valid according to\nOGC Simple definition",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.strictly_simple",
                  "default": "true"
                },
                {
                  "title": "param",
                  "description": "union all multipolygons",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.multi_polygon_union",
                  "default": "false"
                },
                {
                  "title": "param",
                  "description": "the fill type used in determining what are holes and what are outer rings. See the \n[Clipper documentation](http://www.angusj.com/delphi/clipper/documentation/Docs/Units/ClipperLib/Types/PolyFillType.htm)\nto learn more about fill types.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Object"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "mapnik.polygonFillType"
                        }
                      ]
                    }
                  },
                  "name": "options.fill_type",
                  "default": "mapnik.polygonFillType.positive"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "float"
                    }
                  },
                  "name": "options.scale_denominator",
                  "default": "0.0"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.reencode",
                  "default": "false"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      ]
                    }
                  },
                  "name": "options.max_extent",
                  "default": "minx,miny,maxx,maxy"
                },
                {
                  "title": "param",
                  "description": "Simplification works to generalize \ngeometries before encoding into vector tiles.simplification distance The \n`simplify_distance` value works in integer space over a 4096 pixel grid and uses\nthe [Douglas-Peucker algorithm](https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm).",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "float"
                    }
                  },
                  "name": "options.simplify_distance",
                  "default": "0.0"
                },
                {
                  "title": "param",
                  "description": "if `true`, don't assume winding order and ring order of \npolygons are correct according to the [`2.0` Mapbox Vector Tile specification](https://github.com/mapbox/vector-tile-spec)",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.process_all_rings",
                  "default": "false"
                },
                {
                  "title": "param",
                  "description": "or `jpeg`, `png`, `tiff`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.image_format",
                  "default": "webp"
                },
                {
                  "title": "param",
                  "description": "can be any \nof the <mapnik.imageScaling> methods",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.scaling_method",
                  "default": "bilinear"
                },
                {
                  "title": "param",
                  "description": null,
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.threading_mode",
                  "default": "deferred"
                }
              ]
            },
            {
              "title": "param",
              "description": "`function(err)`",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt1 = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> vt2 = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> options = {\n  scale: <span class=\"hljs-number\">1.0</span>,\n  offset_x: <span class=\"hljs-number\">0</span>,\n  offset_y: <span class=\"hljs-number\">0</span>,\n  area_threshold: <span class=\"hljs-number\">0.1</span>,\n  strictly_simple: <span class=\"hljs-literal\">false</span>,\n  multi_polygon_union: <span class=\"hljs-literal\">true</span>,\n  fill_type: mapnik.polygonFillType.nonZero,\n  process_all_rings:<span class=\"hljs-literal\">false</span>,\n  scale_denominator: <span class=\"hljs-number\">0.0</span>,\n  reencode: <span class=\"hljs-literal\">true</span>\n}\n<span class=\"hljs-comment\">// add vt2 to vt1 tile</span>\nvt1.composite([vt2], options, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// your custom code with `vt1`</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "composite"
          ]
        },
        {
          "description": "Synchronous version of {@link VectorTile#composite}",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "compositeSync"
            },
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "an array of vector tile objects",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.VectorTile"
                  }
                ]
              },
              "name": "array"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "object"
                }
              },
              "name": "options"
            },
            {
              "title": "example",
              "description": "var vt1 = new mapnik.VectorTile(0,0,0);\nvar vt2 = new mapnik.VectorTile(0,0,0);\nvar options = { ... };\nvt1.compositeSync([vt2], options);"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 484,
                "column": 1
              },
              "end": {
                "line": 498,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L484-L498"
          },
          "name": "compositeSync",
          "memberof": "mapnik.VectorTile",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "an array of vector tile objects",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.VectorTile"
                  }
                ]
              },
              "name": "array"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "object"
                }
              },
              "name": "options"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt1 = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> vt2 = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> options = { ... };\nvt1.compositeSync([vt2], options);"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "compositeSync"
          ]
        },
        {
          "description": "Return whether this vector tile is empty - whether it has no\nlayers and no features",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "empty"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "whether the layer is empty",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "example",
              "description": "var vt = new mapnik.VectorTile(0,0,0);\nvar empty = vt.empty();\nconsole.log(empty); // true"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1379,
                "column": 1
              },
              "end": {
                "line": 1391,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L1379-L1391"
          },
          "memberof": "mapnik.VectorTile",
          "name": "empty",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "whether the layer is empty",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> empty = vt.empty();\n<span class=\"hljs-built_in\">console</span>.log(empty); <span class=\"hljs-comment\">// true</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "empty"
          ]
        },
        {
          "description": "Get the names of all of the empty layers in this vector tile",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "emptyLayers"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "layer names",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              }
            },
            {
              "title": "example",
              "description": "var vt = new mapnik.VectorTile(0,0,0);\nvar empty = vt.emptyLayers();\n// assumes you have added data to your tile\nconsole.log(empty); // ['layer-name', 'empty-layer']"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1324,
                "column": 1
              },
              "end": {
                "line": 1336,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L1324-L1336"
          },
          "memberof": "mapnik.VectorTile",
          "name": "emptyLayers",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "layer names",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> empty = vt.emptyLayers();\n<span class=\"hljs-comment\">// assumes you have added data to your tile</span>\n<span class=\"hljs-built_in\">console</span>.log(empty); <span class=\"hljs-comment\">// ['layer-name', 'empty-layer']</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "emptyLayers"
          ]
        },
        {
          "description": "Get the extent of this vector tile",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "extent"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "array of extent in the form of `[minx,miny,maxx,maxy]`",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            },
            {
              "title": "example",
              "description": "var vt = new mapnik.VectorTile(9,112,195);\nvar extent = vt.extent();\nconsole.log(extent); // [-11271098.44281895, 4696291.017841229, -11192826.925854929, 4774562.534805248]"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1247,
                "column": 1
              },
              "end": {
                "line": 1258,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L1247-L1258"
          },
          "memberof": "mapnik.VectorTile",
          "name": "extent",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "array of extent in the form of `[minx,miny,maxx,maxy]`",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">112</span>,<span class=\"hljs-number\">195</span>);\n<span class=\"hljs-keyword\">var</span> extent = vt.extent();\n<span class=\"hljs-built_in\">console</span>.log(extent); <span class=\"hljs-comment\">// [-11271098.44281895, 4696291.017841229, -11192826.925854929, 4774562.534805248]</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "extent"
          ]
        },
        {
          "description": "Get the data in this vector tile as a buffer (asynchronous)",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "getData"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "compression type can also be `gzip`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.compression",
                  "default": "none"
                },
                {
                  "title": "param",
                  "description": "a number `0` (no compression) to `9` (best compression)",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "int"
                    }
                  },
                  "name": "options.level",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "must be `FILTERED`, `HUFFMAN_ONLY`, `RLE`, `FIXED`, `DEFAULT`",
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "name": "options.strategy"
                }
              ]
            },
            {
              "title": "param",
              "description": "compression type can also be `gzip`",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.compression",
              "default": "none"
            },
            {
              "title": "param",
              "description": "a number `0` (no compression) to `9` (best compression)",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "int"
                }
              },
              "name": "options.level",
              "default": "0"
            },
            {
              "title": "param",
              "description": "must be `FILTERED`, `HUFFMAN_ONLY`, `RLE`, `FIXED`, `DEFAULT`",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "options.strategy"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "vt.getData({\n  compression: 'gzip',\n  level: 9,\n  strategy: 'FILTERED'\n}, function(err, data) {\n  if (err) throw err;\n  console.log(data); // buffer\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 4230,
                "column": 1
              },
              "end": {
                "line": 4249,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L4230-L4249"
          },
          "memberof": "mapnik.VectorTile",
          "name": "getData",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "compression type can also be `gzip`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.compression",
                  "default": "none"
                },
                {
                  "title": "param",
                  "description": "a number `0` (no compression) to `9` (best compression)",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "int"
                    }
                  },
                  "name": "options.level",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "must be `FILTERED`, `HUFFMAN_ONLY`, `RLE`, `FIXED`, `DEFAULT`",
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "name": "options.strategy"
                }
              ]
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "vt.getData({\n  compression: <span class=\"hljs-string\">'gzip'</span>,\n  level: <span class=\"hljs-number\">9</span>,\n  strategy: <span class=\"hljs-string\">'FILTERED'</span>\n}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-built_in\">console</span>.log(data); <span class=\"hljs-comment\">// buffer</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "getData"
          ]
        },
        {
          "description": "Get the data in this vector tile as a buffer (synchronous)",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "getDataSync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "can also be `gzip`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.compression",
                  "default": "none"
                },
                {
                  "title": "param",
                  "description": "a number `0` (no compression) to `9` (best compression)",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "int"
                    }
                  },
                  "name": "options.level",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "must be `FILTERED`, `HUFFMAN_ONLY`, `RLE`, `FIXED`, `DEFAULT`",
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "name": "options.strategy"
                }
              ]
            },
            {
              "title": "param",
              "description": "can also be `gzip`",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.compression",
              "default": "none"
            },
            {
              "title": "param",
              "description": "a number `0` (no compression) to `9` (best compression)",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "int"
                }
              },
              "name": "options.level",
              "default": "0"
            },
            {
              "title": "param",
              "description": "must be `FILTERED`, `HUFFMAN_ONLY`, `RLE`, `FIXED`, `DEFAULT`",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "options.strategy"
            },
            {
              "title": "returns",
              "description": "raw data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              }
            },
            {
              "title": "example",
              "description": "var data = vt.getData({\n  compression: 'gzip',\n  level: 9,\n  strategy: 'FILTERED'\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 4066,
                "column": 1
              },
              "end": {
                "line": 4083,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L4066-L4083"
          },
          "memberof": "mapnik.VectorTile",
          "name": "getDataSync",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "can also be `gzip`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.compression",
                  "default": "none"
                },
                {
                  "title": "param",
                  "description": "a number `0` (no compression) to `9` (best compression)",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "int"
                    }
                  },
                  "name": "options.level",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "must be `FILTERED`, `HUFFMAN_ONLY`, `RLE`, `FIXED`, `DEFAULT`",
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "name": "options.strategy"
                }
              ]
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "raw data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> data = vt.getData({\n  compression: <span class=\"hljs-string\">'gzip'</span>,\n  level: <span class=\"hljs-number\">9</span>,\n  strategy: <span class=\"hljs-string\">'FILTERED'</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "getDataSync"
          ]
        },
        {
          "description": "Get the names of all of the layers in this vector tile",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "names"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "layer names",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              }
            },
            {
              "title": "example",
              "description": "var vt = new mapnik.VectorTile(0,0,0);\nvar data = fs.readFileSync('./path/to/data.mvt');\nvt.addDataSync(data);\nconsole.log(vt.names()); // ['layer-name', 'another-layer']"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1297,
                "column": 1
              },
              "end": {
                "line": 1309,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L1297-L1309"
          },
          "memberof": "mapnik.VectorTile",
          "name": "names",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "layer names",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> data = fs.readFileSync(<span class=\"hljs-string\">'./path/to/data.mvt'</span>);\nvt.addDataSync(data);\n<span class=\"hljs-built_in\">console</span>.log(vt.names()); <span class=\"hljs-comment\">// ['layer-name', 'another-layer']</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "names"
          ]
        },
        {
          "description": "Get whether the vector tile has been painted. \"Painted\" is \na check to see if data exists in the source dataset in a tile.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "painted"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "painted",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "example",
              "description": "var vt = new mapnik.VectorTile(0,0,0);\nvar painted = vt.painted();\nconsole.log(painted); // false"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1398,
                "column": 1
              },
              "end": {
                "line": 1410,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L1398-L1410"
          },
          "memberof": "mapnik.VectorTile",
          "name": "painted",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "painted",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> painted = vt.painted();\n<span class=\"hljs-built_in\">console</span>.log(painted); <span class=\"hljs-comment\">// false</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "painted"
          ]
        },
        {
          "description": "Get the names of all of the painted layers in this vector tile. \"Painted\" is \na check to see if data exists in the source dataset in a tile.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "paintedLayers"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "layer names",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              }
            },
            {
              "title": "example",
              "description": "var vt = new mapnik.VectorTile(0,0,0);\nvar painted = vt.paintedLayers();\n// assumes you have added data to your tile\nconsole.log(painted); // ['layer-name']"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1351,
                "column": 1
              },
              "end": {
                "line": 1364,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L1351-L1364"
          },
          "memberof": "mapnik.VectorTile",
          "name": "paintedLayers",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "layer names",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> painted = vt.paintedLayers();\n<span class=\"hljs-comment\">// assumes you have added data to your tile</span>\n<span class=\"hljs-built_in\">console</span>.log(painted); <span class=\"hljs-comment\">// ['layer-name']</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "paintedLayers"
          ]
        },
        {
          "description": "Query a vector tile by longitude and latitude and get an array of\nfeatures in the vector tile that exist in relation to those coordinates.\n\nA note on `tolerance`: If you provide a positive value for tolerance you \nare saying that you'd like features returned in the query results that might \nnot exactly intersect with a given lon/lat. The higher the tolerance the \nslower the query will run because it will do more work by comparing your query \nlon/lat against more potential features. However, this is an important parameter \nbecause vector tile storage, by design, results in reduced precision of coordinates. \nThe amount of precision loss depends on the zoom level of a given vector tile \nand how aggressively it was simplified during encoding. So if you want at \nleast one match - say the closest single feature to your query lon/lat - is is \nnot possible to know the smallest tolerance that will work without experimentation. \nIn general be prepared to provide a high tolerance (1-100) for low zoom levels \nwhile you should be okay with a low tolerance (1-10) at higher zoom levels and \nwith vector tiles that are storing less simplified geometries. The units tolerance \nshould be expressed in depend on the coordinate system of the underlying data. \nIn the case of vector tiles this is spherical mercator so the units are meters. \nFor points any features will be returned that contain a point which is, by distance \nin meters, not greater than the tolerance value. For lines any features will be \nreturned that have a segment which is, by distance in meters, not greater than \nthe tolerance value. For polygons tolerance is not supported which means that \nyour lon/lat must fall inside a feature's polygon otherwise that feature will \nnot be matched.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "query"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "longitude",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "longitude"
            },
            {
              "title": "param",
              "description": "latitude",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "latitude"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "include features a specific distance from the \nlon/lat query in the response",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.tolerance",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "layer - Pass a layer name to restrict \nthe query results to a single layer in the vector tile. Get all possible \nlayer names in the vector tile with {@link VectorTile#names}",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.layer"
                }
              ]
            },
            {
              "title": "param",
              "description": "include features a specific distance from the \nlon/lat query in the response",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.tolerance",
              "default": "0"
            },
            {
              "title": "param",
              "description": "layer - Pass a layer name to restrict \nthe query results to a single layer in the vector tile. Get all possible \nlayer names in the vector tile with {@link VectorTile#names}",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.layer"
            },
            {
              "title": "param",
              "description": "(err, features)",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "returns",
              "description": "an array of {@link mapnik.Feature} objects",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.Feature"
                  }
                ]
              }
            },
            {
              "title": "example",
              "description": "vt.query(139.61, 37.17, {tolerance: 0}, function(err, features) {\n  if (err) throw err;\n  console.log(features); // array of objects\n  console.log(features.length) // 1\n  console.log(features[0].id()) // 89\n  console.log(features[0].geometry().type()); // 'Polygon'\n  console.log(features[0].distance); // 0\n  console.log(features[0].layer); // 'layer name'\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1431,
                "column": 1
              },
              "end": {
                "line": 1480,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L1431-L1480"
          },
          "memberof": "mapnik.VectorTile",
          "name": "query",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "longitude",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "longitude"
            },
            {
              "title": "param",
              "description": "latitude",
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "latitude"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "include features a specific distance from the \nlon/lat query in the response",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.tolerance",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "layer - Pass a layer name to restrict \nthe query results to a single layer in the vector tile. Get all possible \nlayer names in the vector tile with {@link VectorTile#names}",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.layer"
                }
              ]
            },
            {
              "title": "param",
              "description": "(err, features)",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "an array of {@link mapnik.Feature} objects",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "mapnik.Feature"
                  }
                ]
              }
            }
          ],
          "examples": [
            "vt.query(<span class=\"hljs-number\">139.61</span>, <span class=\"hljs-number\">37.17</span>, {tolerance: <span class=\"hljs-number\">0</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, features</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-built_in\">console</span>.log(features); <span class=\"hljs-comment\">// array of objects</span>\n  <span class=\"hljs-built_in\">console</span>.log(features.length) <span class=\"hljs-comment\">// 1</span>\n  <span class=\"hljs-built_in\">console</span>.log(features[<span class=\"hljs-number\">0</span>].id()) <span class=\"hljs-comment\">// 89</span>\n  <span class=\"hljs-built_in\">console</span>.log(features[<span class=\"hljs-number\">0</span>].geometry().type()); <span class=\"hljs-comment\">// 'Polygon'</span>\n  <span class=\"hljs-built_in\">console</span>.log(features[<span class=\"hljs-number\">0</span>].distance); <span class=\"hljs-comment\">// 0</span>\n  <span class=\"hljs-built_in\">console</span>.log(features[<span class=\"hljs-number\">0</span>].layer); <span class=\"hljs-comment\">// 'layer name'</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "query"
          ]
        },
        {
          "description": "Query a vector tile by multiple sets of latitude/longitude pairs. \nJust like <mapnik.VectorTile.query> but with more points to search.",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "queryMany"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "`longitude` and `latitude` array pairs [[lon1,lat1], [lon2,lat2]]",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "array"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "include features a specific distance from the \nlon/lat query in the response. Read more about tolerance at {@link VectorTile#query}.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.tolerance",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "layer name",
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "name": "options.layer"
                },
                {
                  "title": "param",
                  "description": "array of field names",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      ]
                    }
                  },
                  "name": "options.fields"
                }
              ]
            },
            {
              "title": "param",
              "description": "include features a specific distance from the \nlon/lat query in the response. Read more about tolerance at {@link VectorTile#query}.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.tolerance",
              "default": "0"
            },
            {
              "title": "param",
              "description": "layer name",
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "options.layer"
            },
            {
              "title": "param",
              "description": "array of field names",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "TypeApplication",
                  "expression": {
                    "type": "NameExpression",
                    "name": "Array"
                  },
                  "applications": [
                    {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  ]
                }
              },
              "name": "options.fields"
            },
            {
              "title": "param",
              "description": "`function(err, results)`",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Function"
                }
              },
              "name": "callback"
            },
            {
              "title": "returns",
              "description": "The response has contains two main objects: `hits` and `features`. \nThe number of hits returned will correspond to the number of lon/lats queried and will \nbe returned in the order of the query. Each hit returns 1) a `distance` and a 2) `feature_id`. \nThe `distance` is number of meters the queried lon/lat is from the object in the vector tile. \nThe `feature_id` is the corresponding object in features object. \n\nThe values for the query is contained in the features object. Use attributes() to extract a value.",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            {
              "title": "example",
              "description": "vt.queryMany([[139.61, 37.17], [140.64, 38.1]], {tolerance: 0}, function(err, results) {\n  if (err) throw err;\n  console.log(results.hits); // \n  console.log(results.features); // array of feature objects\n  if (features.length) {\n    console.log(results.features[0].layer); // 'layer-name'\n    console.log(results.features[0].distance, features[0].x_hit, features[0].y_hit); // 0, 0, 0\n  }\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 1736,
                "column": 1
              },
              "end": {
                "line": 1767,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L1736-L1767"
          },
          "memberof": "mapnik.VectorTile",
          "name": "queryMany",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "`longitude` and `latitude` array pairs [[lon1,lat1], [lon2,lat2]]",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "array"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "include features a specific distance from the \nlon/lat query in the response. Read more about tolerance at {@link VectorTile#query}.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.tolerance",
                  "default": "0"
                },
                {
                  "title": "param",
                  "description": "layer name",
                  "type": {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  "name": "options.layer"
                },
                {
                  "title": "param",
                  "description": "array of field names",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      ]
                    }
                  },
                  "name": "options.fields"
                }
              ]
            },
            {
              "title": "param",
              "description": "`function(err, results)`",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Function"
                }
              },
              "name": "callback"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "The response has contains two main objects: `hits` and `features`. \nThe number of hits returned will correspond to the number of lon/lats queried and will \nbe returned in the order of the query. Each hit returns 1) a `distance` and a 2) `feature_id`. \nThe `distance` is number of meters the queried lon/lat is from the object in the vector tile. \nThe `feature_id` is the corresponding object in features object. \n\nThe values for the query is contained in the features object. Use attributes() to extract a value.",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "examples": [
            "vt.queryMany([[<span class=\"hljs-number\">139.61</span>, <span class=\"hljs-number\">37.17</span>], [<span class=\"hljs-number\">140.64</span>, <span class=\"hljs-number\">38.1</span>]], {tolerance: <span class=\"hljs-number\">0</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, results</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-built_in\">console</span>.log(results.hits); <span class=\"hljs-comment\">// </span>\n  <span class=\"hljs-built_in\">console</span>.log(results.features); <span class=\"hljs-comment\">// array of feature objects</span>\n  <span class=\"hljs-keyword\">if</span> (features.length) {\n    <span class=\"hljs-built_in\">console</span>.log(results.features[<span class=\"hljs-number\">0</span>].layer); <span class=\"hljs-comment\">// 'layer-name'</span>\n    <span class=\"hljs-built_in\">console</span>.log(results.features[<span class=\"hljs-number\">0</span>].distance, features[<span class=\"hljs-number\">0</span>].x_hit, features[<span class=\"hljs-number\">0</span>].y_hit); <span class=\"hljs-comment\">// 0, 0, 0</span>\n  }\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "queryMany"
          ]
        },
        {
          "description": "Render/write this vector tile to a surface/image, like a {@link mapnik.Image}",
          "tags": [
            {
              "title": "name",
              "description": null,
              "name": "render"
            },
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "mapnik map object",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Map"
              },
              "name": "map"
            },
            {
              "title": "param",
              "description": "renderable surface object",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              },
              "name": "surface"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "an integer zoom level. Must be used with `x` and `y`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.z"
                },
                {
                  "title": "param",
                  "description": "an integer x coordinate. Must be used with `y` and `z`.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.x"
                },
                {
                  "title": "param",
                  "description": "an integer y coordinate. Must be used with `x` and `z`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.y"
                },
                {
                  "title": "param",
                  "description": "the size of the tile's buffer",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.buffer_size"
                },
                {
                  "title": "param",
                  "description": "floating point scale factor size to used\nfor rendering",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scale"
                },
                {
                  "title": "param",
                  "description": "An floating point `scale_denominator` \nto be used by Mapnik when matching zoom filters. If provided this overrides the \nauto-calculated scale_denominator that is based on the map dimensions and bbox. \nDo not set this option unless you know what it means.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scale_denominator"
                },
                {
                  "title": "param",
                  "description": "Mapnik 3.x ONLY: A javascript object \ncontaining key value pairs that should be passed into Mapnik as variables \nfor rendering and for datasource queries. For example if you passed \n`vtile.render(map,image,{ variables : {zoom:1} },cb)` then the `@zoom`\nvariable would be usable in Mapnik symbolizers like `line-width:\"@zoom\"`\nand as a token in Mapnik postgis sql sub-selects like \n`(select * from table where some_field > @zoom)` as tmp",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  "name": "options.variables"
                },
                {
                  "title": "param",
                  "description": "must be `cairo` or `svg`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.renderer"
                },
                {
                  "title": "param",
                  "description": "option required for grid rendering \nand must be either a layer name (string) or layer index (integer)",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        },
                        {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      ]
                    }
                  },
                  "name": "options.layer"
                },
                {
                  "title": "param",
                  "description": "must be an array of strings",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      ]
                    }
                  },
                  "name": "options.fields"
                }
              ]
            },
            {
              "title": "param",
              "description": "an integer zoom level. Must be used with `x` and `y`",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.z"
            },
            {
              "title": "param",
              "description": "an integer x coordinate. Must be used with `y` and `z`.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.x"
            },
            {
              "title": "param",
              "description": "an integer y coordinate. Must be used with `x` and `z`",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.y"
            },
            {
              "title": "param",
              "description": "the size of the tile's buffer",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.buffer_size"
            },
            {
              "title": "param",
              "description": "floating point scale factor size to used\nfor rendering",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.scale"
            },
            {
              "title": "param",
              "description": "An floating point `scale_denominator` \nto be used by Mapnik when matching zoom filters. If provided this overrides the \nauto-calculated scale_denominator that is based on the map dimensions and bbox. \nDo not set this option unless you know what it means.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "options.scale_denominator"
            },
            {
              "title": "param",
              "description": "Mapnik 3.x ONLY: A javascript object \ncontaining key value pairs that should be passed into Mapnik as variables \nfor rendering and for datasource queries. For example if you passed \n`vtile.render(map,image,{ variables : {zoom:1} },cb)` then the `@zoom`\nvariable would be usable in Mapnik symbolizers like `line-width:\"@zoom\"`\nand as a token in Mapnik postgis sql sub-selects like \n`(select * from table where some_field > @zoom)` as tmp",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options.variables"
            },
            {
              "title": "param",
              "description": "must be `cairo` or `svg`",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "options.renderer"
            },
            {
              "title": "param",
              "description": "option required for grid rendering \nand must be either a layer name (string) or layer index (integer)",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  ]
                }
              },
              "name": "options.layer"
            },
            {
              "title": "param",
              "description": "must be an array of strings",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "TypeApplication",
                  "expression": {
                    "type": "NameExpression",
                    "name": "Array"
                  },
                  "applications": [
                    {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  ]
                }
              },
              "name": "options.fields"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "var vt = new mapnik.VectorTile(0,0,0);\nvar tileSize = vt.tileSize;\nvar map = new mapnik.Map(tileSize, tileSize);\nvt.render(map, new mapnik.Image(256,256), function(err, image) {\n  if (err) throw err;   \n  // save the rendered image to an existing image file somewhere\n  // see mapnik.Image for available methods\n  image.save('./path/to/image/file.png', 'png32');\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 4520,
                "column": 1
              },
              "end": {
                "line": 4561,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L4520-L4561"
          },
          "name": "render",
          "memberof": "mapnik.VectorTile",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "mapnik map object",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Map"
              },
              "name": "map"
            },
            {
              "title": "param",
              "description": "renderable surface object",
              "type": {
                "type": "NameExpression",
                "name": "mapnik.Image"
              },
              "name": "surface"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "an integer zoom level. Must be used with `x` and `y`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.z"
                },
                {
                  "title": "param",
                  "description": "an integer x coordinate. Must be used with `y` and `z`.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.x"
                },
                {
                  "title": "param",
                  "description": "an integer y coordinate. Must be used with `x` and `z`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.y"
                },
                {
                  "title": "param",
                  "description": "the size of the tile's buffer",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.buffer_size"
                },
                {
                  "title": "param",
                  "description": "floating point scale factor size to used\nfor rendering",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scale"
                },
                {
                  "title": "param",
                  "description": "An floating point `scale_denominator` \nto be used by Mapnik when matching zoom filters. If provided this overrides the \nauto-calculated scale_denominator that is based on the map dimensions and bbox. \nDo not set this option unless you know what it means.",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  },
                  "name": "options.scale_denominator"
                },
                {
                  "title": "param",
                  "description": "Mapnik 3.x ONLY: A javascript object \ncontaining key value pairs that should be passed into Mapnik as variables \nfor rendering and for datasource queries. For example if you passed \n`vtile.render(map,image,{ variables : {zoom:1} },cb)` then the `@zoom`\nvariable would be usable in Mapnik symbolizers like `line-width:\"@zoom\"`\nand as a token in Mapnik postgis sql sub-selects like \n`(select * from table where some_field > @zoom)` as tmp",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  },
                  "name": "options.variables"
                },
                {
                  "title": "param",
                  "description": "must be `cairo` or `svg`",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "string"
                    }
                  },
                  "name": "options.renderer"
                },
                {
                  "title": "param",
                  "description": "option required for grid rendering \nand must be either a layer name (string) or layer index (integer)",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "UnionType",
                      "elements": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        },
                        {
                          "type": "NameExpression",
                          "name": "number"
                        }
                      ]
                    }
                  },
                  "name": "options.layer"
                },
                {
                  "title": "param",
                  "description": "must be an array of strings",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "TypeApplication",
                      "expression": {
                        "type": "NameExpression",
                        "name": "Array"
                      },
                      "applications": [
                        {
                          "type": "NameExpression",
                          "name": "string"
                        }
                      ]
                    }
                  },
                  "name": "options.fields"
                }
              ]
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = <span class=\"hljs-keyword\">new</span> mapnik.VectorTile(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">var</span> tileSize = vt.tileSize;\n<span class=\"hljs-keyword\">var</span> map = <span class=\"hljs-keyword\">new</span> mapnik.Map(tileSize, tileSize);\nvt.render(map, <span class=\"hljs-keyword\">new</span> mapnik.Image(<span class=\"hljs-number\">256</span>,<span class=\"hljs-number\">256</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, image</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;   \n  <span class=\"hljs-comment\">// save the rendered image to an existing image file somewhere</span>\n  <span class=\"hljs-comment\">// see mapnik.Image for available methods</span>\n  image.save(<span class=\"hljs-string\">'./path/to/image/file.png'</span>, <span class=\"hljs-string\">'png32'</span>);\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "render"
          ]
        },
        {
          "description": "Count the number of geometries that are not [OGC simple]{@link http://www.iso.org/iso/catalogue_detail.htm?csnumber=40114}",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "reportGeometrySimplicity"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "vectorTile.reportGeometrySimplicity(function(err, simple) {\n  if (err) throw err;\n  console.log(simple); // array of non-simple geometries and their layer info\n  console.log(simple.length); // number\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 5471,
                "column": 1
              },
              "end": {
                "line": 5484,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L5471-L5484"
          },
          "memberof": "mapnik.VectorTile",
          "name": "reportGeometrySimplicity",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "vectorTile.reportGeometrySimplicity(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, simple</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-built_in\">console</span>.log(simple); <span class=\"hljs-comment\">// array of non-simple geometries and their layer info</span>\n  <span class=\"hljs-built_in\">console</span>.log(simple.length); <span class=\"hljs-comment\">// number</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "reportGeometrySimplicity"
          ]
        },
        {
          "description": "Count the number of geometries that are not [OGC simple]{@link http://www.iso.org/iso/catalogue_detail.htm?csnumber=40114}",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "reportGeometrySimplicitySync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "number of features that are not simple",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "example",
              "description": "var simple = vectorTile.reportGeometrySimplicitySync();\nconsole.log(simple); // array of non-simple geometries and their layer info\nconsole.log(simple.length); // number"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 5395,
                "column": 1
              },
              "end": {
                "line": 5406,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L5395-L5406"
          },
          "memberof": "mapnik.VectorTile",
          "name": "reportGeometrySimplicitySync",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "number of features that are not simple",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> simple = vectorTile.reportGeometrySimplicitySync();\n<span class=\"hljs-built_in\">console</span>.log(simple); <span class=\"hljs-comment\">// array of non-simple geometries and their layer info</span>\n<span class=\"hljs-built_in\">console</span>.log(simple.length); <span class=\"hljs-comment\">// number</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "reportGeometrySimplicitySync"
          ]
        },
        {
          "description": "Count the number of geometries that are not [OGC valid]{@link http://postgis.net/docs/using_postgis_dbmanagement.html#OGC_Validity}",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "reportGeometryValidity"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "vectorTile.reportGeometryValidity(function(err, valid) {\n  console.log(valid); // array of invalid geometries and their layer info\n  console.log(valid.length); // number    \n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 5548,
                "column": 1
              },
              "end": {
                "line": 5560,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L5548-L5560"
          },
          "memberof": "mapnik.VectorTile",
          "name": "reportGeometryValidity",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "vectorTile.reportGeometryValidity(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, valid</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(valid); <span class=\"hljs-comment\">// array of invalid geometries and their layer info</span>\n  <span class=\"hljs-built_in\">console</span>.log(valid.length); <span class=\"hljs-comment\">// number    </span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "reportGeometryValidity"
          ]
        },
        {
          "description": "Count the number of geometries that are not [OGC valid]{@link http://postgis.net/docs/using_postgis_dbmanagement.html#OGC_Validity}",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "reportGeometryValiditySync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "returns",
              "description": "number of features that are not valid",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            },
            {
              "title": "example",
              "description": "var valid = vectorTile.reportGeometryValiditySync();\nconsole.log(valid); // array of invalid geometries and their layer info\nconsole.log(valid.length); // number"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 5433,
                "column": 1
              },
              "end": {
                "line": 5444,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L5433-L5444"
          },
          "memberof": "mapnik.VectorTile",
          "name": "reportGeometryValiditySync",
          "scope": "instance",
          "returns": [
            {
              "title": "returns",
              "description": "number of features that are not valid",
              "type": {
                "type": "NameExpression",
                "name": "number"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> valid = vectorTile.reportGeometryValiditySync();\n<span class=\"hljs-built_in\">console</span>.log(valid); <span class=\"hljs-comment\">// array of invalid geometries and their layer info</span>\n<span class=\"hljs-built_in\">console</span>.log(valid.length); <span class=\"hljs-comment\">// number</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "reportGeometryValiditySync"
          ]
        },
        {
          "description": "Replace the data in this vector tile with new raw data",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "setData"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "raw data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "var data = fs.readFileSync('./path/to/data.mvt');\nvectorTile.setData(data, function(err) {\n  if (err) throw err;\n  // your custom code\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3964,
                "column": 1
              },
              "end": {
                "line": 3978,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L3964-L3978"
          },
          "memberof": "mapnik.VectorTile",
          "name": "setData",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "raw data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> data = fs.readFileSync(<span class=\"hljs-string\">'./path/to/data.mvt'</span>);\nvectorTile.setData(data, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-comment\">// your custom code</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "setData"
          ]
        },
        {
          "description": "Replace the data in this vector tile with new raw data (synchronous). This function validates\ngeometry according to the [Mapbox Vector Tile specification](https://github.com/mapbox/vector-tile-spec).",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "setDataSync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "raw data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            },
            {
              "title": "example",
              "description": "var data = fs.readFileSync('./path/to/data.mvt');\nvectorTile.setDataSync(data);\n// your custom code"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 3899,
                "column": 1
              },
              "end": {
                "line": 3911,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L3899-L3911"
          },
          "memberof": "mapnik.VectorTile",
          "name": "setDataSync",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "raw data",
              "type": {
                "type": "NameExpression",
                "name": "Buffer"
              },
              "name": "buffer"
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> data = fs.readFileSync(<span class=\"hljs-string\">'./path/to/data.mvt'</span>);\nvectorTile.setDataSync(data);\n<span class=\"hljs-comment\">// your custom code</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "setDataSync"
          ]
        },
        {
          "description": "Get a [GeoJSON](http://geojson.org/) representation of this tile",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "toGeoJSON"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": "Can be a custom layer name, \n`__array__` of layer names, or `__all__` for all layers.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  ]
                }
              },
              "name": "layer",
              "default": "__all__"
            },
            {
              "title": "param",
              "description": "Specify the layer index, cannot be greater\nthan the number of layers in the vector tile",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "index",
              "default": "0"
            },
            {
              "title": "param",
              "description": "`function(err, geojson)`: a stringified \nGeoJSON of all the features in this tile",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            },
            {
              "title": "example",
              "description": "vectorTile.toGeoJSON(function(err, geojson) {\n  if (err) throw err;\n  console.log(geojson); // stringified GeoJSON\n  console.log(JSON.parse(geojson)); // GeoJSON object\n});"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2912,
                "column": 1
              },
              "end": {
                "line": 2930,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L2912-L2930"
          },
          "memberof": "mapnik.VectorTile",
          "name": "toGeoJSON",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": "Can be a custom layer name, \n`__array__` of layer names, or `__all__` for all layers.",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "string"
                    },
                    {
                      "type": "NameExpression",
                      "name": "number"
                    }
                  ]
                }
              },
              "name": "layer",
              "default": "__all__"
            },
            {
              "title": "param",
              "description": "Specify the layer index, cannot be greater\nthan the number of layers in the vector tile",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              "name": "index",
              "default": "0"
            },
            {
              "title": "param",
              "description": "`function(err, geojson)`: a stringified \nGeoJSON of all the features in this tile",
              "type": {
                "type": "NameExpression",
                "name": "Function"
              },
              "name": "callback"
            }
          ],
          "examples": [
            "vectorTile.toGeoJSON(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, geojson</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">throw</span> err;\n  <span class=\"hljs-built_in\">console</span>.log(geojson); <span class=\"hljs-comment\">// stringified GeoJSON</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.parse(geojson)); <span class=\"hljs-comment\">// GeoJSON object</span>\n});"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "toGeoJSON"
          ]
        },
        {
          "description": "Syncronous version of {@link VectorTile#toGeoJSON}",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "toGeoJSONSync"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "layer"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "inded"
            },
            {
              "title": "returns",
              "description": "stringified GeoJSON of all the features in this tile.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "example",
              "description": "var geojson = vectorTile.toGeoJSONSync();\ngeojson // stringified GeoJSON\nJSON.parse(geojson); // GeoJSON object"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2695,
                "column": 1
              },
              "end": {
                "line": 2708,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L2695-L2708"
          },
          "memberof": "mapnik.VectorTile",
          "name": "toGeoJSONSync",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "NameExpression",
                    "name": "number"
                  }
                ]
              },
              "name": "layer"
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "inded"
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "stringified GeoJSON of all the features in this tile.",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> geojson = vectorTile.toGeoJSONSync();\ngeojson <span class=\"hljs-comment\">// stringified GeoJSON</span>\n<span class=\"hljs-built_in\">JSON</span>.parse(geojson); <span class=\"hljs-comment\">// GeoJSON object</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "toGeoJSONSync"
          ]
        },
        {
          "description": "Get a JSON representation of this tile",
          "tags": [
            {
              "title": "memberof",
              "description": "mapnik.VectorTile"
            },
            {
              "title": "name",
              "description": null,
              "name": "toJSON"
            },
            {
              "title": "instance",
              "description": null
            },
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "return geometry as integers\nrelative to the tile grid",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.decode_geometry",
                  "default": "false"
                }
              ]
            },
            {
              "title": "param",
              "description": "return geometry as integers\nrelative to the tile grid",
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "bool"
                }
              },
              "name": "options.decode_geometry",
              "default": "false"
            },
            {
              "title": "returns",
              "description": "json representation of this tile with name, extent,\nversion, and feature properties",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            {
              "title": "example",
              "description": "var vt = mapnik.VectorTile(10,131,242);\nvar buffer = fs.readFileSync('./path/to/data.mvt');\nvt.setData(buffer);\nvar json = vectorTile.toJSON();\nconsole.log(json); \n// { \n//   name: 'layer-name',\n//   extent: 4096, \n//   version: 2,\n//   features: [ ... ] // array of objects\n// }"
            }
          ],
          "context": {
            "loc": {
              "start": {
                "line": 2401,
                "column": 1
              },
              "end": {
                "line": 2424,
                "column": 3
              }
            },
            "file": "src/mapnik_vector_tile.cpp",
            "path": "src/mapnik_vector_tile.cpp",
            "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/mapnik_vector_tile.cpp#L2401-L2424"
          },
          "memberof": "mapnik.VectorTile",
          "name": "toJSON",
          "scope": "instance",
          "params": [
            {
              "title": "param",
              "description": null,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "Object"
                }
              },
              "name": "options",
              "properties": [
                {
                  "title": "param",
                  "description": "return geometry as integers\nrelative to the tile grid",
                  "type": {
                    "type": "OptionalType",
                    "expression": {
                      "type": "NameExpression",
                      "name": "bool"
                    }
                  },
                  "name": "options.decode_geometry",
                  "default": "false"
                }
              ]
            }
          ],
          "returns": [
            {
              "title": "returns",
              "description": "json representation of this tile with name, extent,\nversion, and feature properties",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "examples": [
            "<span class=\"hljs-keyword\">var</span> vt = mapnik.VectorTile(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">131</span>,<span class=\"hljs-number\">242</span>);\n<span class=\"hljs-keyword\">var</span> buffer = fs.readFileSync(<span class=\"hljs-string\">'./path/to/data.mvt'</span>);\nvt.setData(buffer);\n<span class=\"hljs-keyword\">var</span> json = vectorTile.toJSON();\n<span class=\"hljs-built_in\">console</span>.log(json); \n<span class=\"hljs-comment\">// { </span>\n<span class=\"hljs-comment\">//   name: 'layer-name',</span>\n<span class=\"hljs-comment\">//   extent: 4096, </span>\n<span class=\"hljs-comment\">//   version: 2,</span>\n<span class=\"hljs-comment\">//   features: [ ... ] // array of objects</span>\n<span class=\"hljs-comment\">// }</span>"
          ],
          "members": {
            "instance": [],
            "static": []
          },
          "events": [],
          "path": [
            "mapnik.VectorTile",
            "toJSON"
          ]
        }
      ],
      "static": []
    },
    "events": [],
    "path": [
      "mapnik.VectorTile"
    ]
  },
  {
    "description": "Composite multiple images on top of each other, with strong control\nover how the images are combined, resampled, and blended.",
    "tags": [
      {
        "title": "name",
        "description": null,
        "name": "mapnik.blend"
      }
    ],
    "context": {
      "loc": {
        "start": {
          "line": 440,
          "column": 1
        },
        "end": {
          "line": 460,
          "column": 3
        }
      },
      "file": "src/blend.cpp",
      "path": "src/blend.cpp",
      "github": "https://github.com/mapnik/node-mapnik/blob/c9229299b00860545aa5ada79405f20e93485903/src/blend.cpp#L440-L460"
    },
    "name": "mapnik.blend",
    "members": {
      "instance": [],
      "static": []
    },
    "events": [],
    "path": [
      "mapnik.blend"
    ]
  }
]